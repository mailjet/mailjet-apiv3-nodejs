/*! For license information please see mailjet.node.js.LICENSE.txt */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.mailjet=n():e.mailjet=n()}(this,(()=>{return e={28:(e,n,a)=>{var i=a(8051),t=a(9500),o=a(6276);function s(e,n){return e<n?-1:e>n?1:0}e.exports=function(e,n,a,s){var r=t(e,a);return i(e,n,r,(function a(t,o){t?s(t,o):(r.index++,r.index<(r.keyedList||e).length?i(e,n,r,a):s(null,r.results))})),o.bind(r,s)},e.exports.ascending=s,e.exports.descending=function(e,n){return-1*s(e,n)}},64:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SentCampaign=n.DraftCampaign=void 0,function(e){!function(e){e.Tool2="tool2",e.HTML2="html2",e.MJML="mjml"}(e.EditMode||(e.EditMode={})),function(e){e[e.AXCanceled=-3]="AXCanceled",e[e.Deleted=-2]="Deleted",e[e.Archived=-1]="Archived",e[e.Draft=0]="Draft",e[e.Programmed=1]="Programmed",e[e.Sent=2]="Sent",e[e.AXTested=3]="AXTested",e[e.AXSelected=4]="AXSelected"}(e.CampaignDraftStatus||(e.CampaignDraftStatus={})),function(e){e.AXCancelled="AXCancelled",e.Deleted="Deleted",e.Archived="Archived",e.Draft="Draft",e.Programmed="Programmed",e.Sent="Sent",e.AXTested="AXTested",e.AXSelected="AXSelected"}(e.CampaignDraftSendingStatus||(e.CampaignDraftSendingStatus={}))}(n.DraftCampaign||(n.DraftCampaign={})),function(e){!function(e){e[e.Transactional=1]="Transactional",e[e.Marketing=2]="Marketing",e[e.Unknown=3]="Unknown"}(e.CampaignType||(e.CampaignType={}))}(n.SentCampaign||(n.SentCampaign={}))},76:e=>{"use strict";e.exports=Function.prototype.call},382:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.DNS=n.Sender=void 0,function(e){!function(e){e.Transactional="transactional",e.Bulk="bulk",e.Unknown="unknown"}(e.EmailType||(e.EmailType={})),function(e){e.Inactive="Inactive",e.Active="Active",e.Deleted="Deleted"}(e.SenderStatus||(e.SenderStatus={}))}(n.Sender||(n.Sender={})),function(e){!function(e){e.OK="OK",e.Error="Error",e.NotChecked="Not checked"}(e.DKIMConfigurationCheckStatus||(e.DKIMConfigurationCheckStatus={})),function(e){e.OK="OK",e.Error="Error"}(e.DKIMConfigurationStatus||(e.DKIMConfigurationStatus={})),function(e){e.OK="OK",e.Error="Error",e.NotChecked="Not checked",e.NotFound="Not found"}(e.SPFConfigurationCheckStatus||(e.SPFConfigurationCheckStatus={})),function(e){e.OK="OK",e.Error="Error"}(e.SPFConfigurationStatus||(e.SPFConfigurationStatus={}))}(n.DNS||(n.DNS={}))},405:e=>{e.exports=function(e){var n="function"==typeof setImmediate?setImmediate:"object"==typeof process&&"function"==typeof process.nextTick?process.nextTick:null;n?n(e):setTimeout(e,0)}},414:e=>{"use strict";e.exports=Math.round},453:(e,n,a)=>{"use strict";var i,t=a(9612),o=a(9383),s=a(1237),r=a(9290),c=a(9538),p=a(8068),l=a(9675),u=a(5345),d=a(1514),m=a(8968),f=a(6188),x=a(8002),v=a(5880),h=a(414),b=a(3093),g=Function,y=function(e){try{return g('"use strict"; return ('+e+").constructor;")()}catch(e){}},w=a(5795),k=a(655),j=function(){throw new l},S=w?function(){try{return j}catch(e){try{return w(arguments,"callee").get}catch(e){return j}}}():j,_=a(4039)(),E=a(3628),O=a(1064),A=a(8648),C=a(1002),R=a(76),T={},P="undefined"!=typeof Uint8Array&&E?E(Uint8Array):i,F={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?i:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?i:ArrayBuffer,"%ArrayIteratorPrototype%":_&&E?E([][Symbol.iterator]()):i,"%AsyncFromSyncIteratorPrototype%":i,"%AsyncFunction%":T,"%AsyncGenerator%":T,"%AsyncGeneratorFunction%":T,"%AsyncIteratorPrototype%":T,"%Atomics%":"undefined"==typeof Atomics?i:Atomics,"%BigInt%":"undefined"==typeof BigInt?i:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?i:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?i:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?i:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":o,"%eval%":eval,"%EvalError%":s,"%Float16Array%":"undefined"==typeof Float16Array?i:Float16Array,"%Float32Array%":"undefined"==typeof Float32Array?i:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?i:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?i:FinalizationRegistry,"%Function%":g,"%GeneratorFunction%":T,"%Int8Array%":"undefined"==typeof Int8Array?i:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?i:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?i:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":_&&E?E(E([][Symbol.iterator]())):i,"%JSON%":"object"==typeof JSON?JSON:i,"%Map%":"undefined"==typeof Map?i:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&_&&E?E((new Map)[Symbol.iterator]()):i,"%Math%":Math,"%Number%":Number,"%Object%":t,"%Object.getOwnPropertyDescriptor%":w,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?i:Promise,"%Proxy%":"undefined"==typeof Proxy?i:Proxy,"%RangeError%":r,"%ReferenceError%":c,"%Reflect%":"undefined"==typeof Reflect?i:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?i:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&_&&E?E((new Set)[Symbol.iterator]()):i,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?i:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":_&&E?E(""[Symbol.iterator]()):i,"%Symbol%":_?Symbol:i,"%SyntaxError%":p,"%ThrowTypeError%":S,"%TypedArray%":P,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?i:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?i:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?i:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?i:Uint32Array,"%URIError%":u,"%WeakMap%":"undefined"==typeof WeakMap?i:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?i:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?i:WeakSet,"%Function.prototype.call%":R,"%Function.prototype.apply%":C,"%Object.defineProperty%":k,"%Object.getPrototypeOf%":O,"%Math.abs%":d,"%Math.floor%":m,"%Math.max%":f,"%Math.min%":x,"%Math.pow%":v,"%Math.round%":h,"%Math.sign%":b,"%Reflect.getPrototypeOf%":A};if(E)try{null.error}catch(e){var B=E(E(e));F["%Error.prototype%"]=B}var N=function e(n){var a;if("%AsyncFunction%"===n)a=y("async function () {}");else if("%GeneratorFunction%"===n)a=y("function* () {}");else if("%AsyncGeneratorFunction%"===n)a=y("async function* () {}");else if("%AsyncGenerator%"===n){var i=e("%AsyncGeneratorFunction%");i&&(a=i.prototype)}else if("%AsyncIteratorPrototype%"===n){var t=e("%AsyncGenerator%");t&&E&&(a=E(t.prototype))}return F[n]=a,a},U={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},L=a(6743),z=a(9957),I=L.call(R,Array.prototype.concat),D=L.call(C,Array.prototype.splice),M=L.call(R,String.prototype.replace),q=L.call(R,String.prototype.slice),H=L.call(R,RegExp.prototype.exec),V=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,G=/\\(\\)?/g,K=function(e,n){var a,i=e;if(z(U,i)&&(i="%"+(a=U[i])[0]+"%"),z(F,i)){var t=F[i];if(t===T&&(t=N(i)),void 0===t&&!n)throw new l("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:a,name:i,value:t}}throw new p("intrinsic "+e+" does not exist!")};e.exports=function(e,n){if("string"!=typeof e||0===e.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof n)throw new l('"allowMissing" argument must be a boolean');if(null===H(/^%?[^%]*%?$/,e))throw new p("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var a=function(e){var n=q(e,0,1),a=q(e,-1);if("%"===n&&"%"!==a)throw new p("invalid intrinsic syntax, expected closing `%`");if("%"===a&&"%"!==n)throw new p("invalid intrinsic syntax, expected opening `%`");var i=[];return M(e,V,(function(e,n,a,t){i[i.length]=a?M(t,G,"$1"):n||e})),i}(e),i=a.length>0?a[0]:"",t=K("%"+i+"%",n),o=t.name,s=t.value,r=!1,c=t.alias;c&&(i=c[0],D(a,I([0,1],c)));for(var u=1,d=!0;u<a.length;u+=1){var m=a[u],f=q(m,0,1),x=q(m,-1);if(('"'===f||"'"===f||"`"===f||'"'===x||"'"===x||"`"===x)&&f!==x)throw new p("property names with quotes must have matching quotes");if("constructor"!==m&&d||(r=!0),z(F,o="%"+(i+="."+m)+"%"))s=F[o];else if(null!=s){if(!(m in s)){if(!n)throw new l("base intrinsic for "+e+" exists, but the property is not available.");return}if(w&&u+1>=a.length){var v=w(s,m);s=(d=!!v)&&"get"in v&&!("originalValue"in v.get)?v.get:s[m]}else d=z(s,m),s=s[m];d&&!r&&(F[o]=s)}}return s}},457:function(e,n,a){"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var o=t(a(476)),s=t(a(3750));n.default=function(e,n,a){if("object"!==i(e)||(0,s.default)(e))throw Error('Argument "targetObject" is not object');if(!n)throw Error('Argument "path" is required');(0,o.default)(a)||(e[n]=a)}},476:function(e,n,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var t=i(a(3750)),o=i(a(3235));n.default=function(e){return(0,o.default)(e)||(0,t.default)(e)}},655:e=>{"use strict";var n=Object.defineProperty||!1;if(n)try{n({},"a",{value:1})}catch(e){n=!1}e.exports=n},696:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ContactProperties=n.BulkContactManagement=void 0,function(e){!function(e){e.AddForce="addforce",e.AddNoForce="addnoforce",e.Remove="remove",e.UnSub="unsub"}(e.ManageContactsAction||(e.ManageContactsAction={})),function(e){e.AddForce="addforce",e.AddNoForce="addnoforce",e.UnSub="unsub",e.DuplicateOverride="duplicate-override",e.DuplicateNoOverride="duplicate-no-override"}(e.ImportListAction||(e.ImportListAction={})),function(e){e.AddForce="addforce",e.AddNoForce="addnoforce",e.Remove="remove",e.UnSub="unsub",e.ExcludeMarketing="excludemarketing",e.IncludeMarketing="includemarketing"}(e.ImportCSVMethod||(e.ImportCSVMethod={})),function(e){e.Upload="Upload",e.Completed="Completed",e.Abort="Abort"}(e.CSVImportStatus||(e.CSVImportStatus={})),function(e){e.Completed="Completed",e.InProgress="In Progress",e.Error="Error"}(e.JobStatus||(e.JobStatus={}))}(n.BulkContactManagement||(n.BulkContactManagement={})),function(e){!function(e){e.Str="str",e.Int="int",e.Float="float",e.Bool="bool",e.DateTime="datetime"}(e.DataType||(e.DataType={})),function(e){e.Static="static",e.Historic="historic"}(e.NameSpace||(e.NameSpace={}))}(n.ContactProperties||(n.ContactProperties={}))},736:(e,n,a)=>{e.exports=function(e){function n(e){let a,t,o,s=null;function r(...e){if(!r.enabled)return;const i=r,t=Number(new Date),o=t-(a||t);i.diff=o,i.prev=a,i.curr=t,a=t,e[0]=n.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((a,t)=>{if("%%"===a)return"%";s++;const o=n.formatters[t];if("function"==typeof o){const n=e[s];a=o.call(i,n),e.splice(s,1),s--}return a})),n.formatArgs.call(i,e),(i.log||n.log).apply(i,e)}return r.namespace=e,r.useColors=n.useColors(),r.color=n.selectColor(e),r.extend=i,r.destroy=n.destroy,Object.defineProperty(r,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(t!==n.namespaces&&(t=n.namespaces,o=n.enabled(e)),o),set:e=>{s=e}}),"function"==typeof n.init&&n.init(r),r}function i(e,a){const i=n(this.namespace+(void 0===a?":":a)+e);return i.log=this.log,i}function t(e,n){let a=0,i=0,t=-1,o=0;for(;a<e.length;)if(i<n.length&&(n[i]===e[a]||"*"===n[i]))"*"===n[i]?(t=i,o=a,i++):(a++,i++);else{if(-1===t)return!1;i=t+1,o++,a=o}for(;i<n.length&&"*"===n[i];)i++;return i===n.length}return n.debug=n,n.default=n,n.coerce=function(e){return e instanceof Error?e.stack||e.message:e},n.disable=function(){const e=[...n.names,...n.skips.map((e=>"-"+e))].join(",");return n.enable(""),e},n.enable=function(e){n.save(e),n.namespaces=e,n.names=[],n.skips=[];const a=("string"==typeof e?e:"").trim().replace(" ",",").split(",").filter(Boolean);for(const e of a)"-"===e[0]?n.skips.push(e.slice(1)):n.names.push(e)},n.enabled=function(e){for(const a of n.skips)if(t(e,a))return!1;for(const a of n.names)if(t(e,a))return!0;return!1},n.humanize=a(6585),n.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((a=>{n[a]=e[a]})),n.names=[],n.skips=[],n.formatters={},n.selectColor=function(e){let a=0;for(let n=0;n<e.length;n++)a=(a<<5)-a+e.charCodeAt(n),a|=0;return n.colors[Math.abs(a)%n.colors.length]},n.enable(n.load()),n}},737:(e,n,a)=>{"use strict";var i=a(801),t=a(9023),o=a(6928),s=a(8611),r=a(5692),c=a(7016).parse,p=a(9896),l=a(2203).Stream,u=a(6982),d=a(6049),m=a(1873),f=a(9605),x=a(9957),v=a(1362);function h(e){if(!(this instanceof h))return new h(e);for(var n in this._overheadLength=0,this._valueLength=0,this._valuesToMeasure=[],i.call(this),e=e||{})this[n]=e[n]}t.inherits(h,i),h.LINE_BREAK="\r\n",h.DEFAULT_CONTENT_TYPE="application/octet-stream",h.prototype.append=function(e,n,a){"string"==typeof(a=a||{})&&(a={filename:a});var t=i.prototype.append.bind(this);if("number"!=typeof n&&null!=n||(n=String(n)),Array.isArray(n))this._error(new Error("Arrays are not supported."));else{var o=this._multiPartHeader(e,n,a),s=this._multiPartFooter();t(o),t(n),t(s),this._trackLength(o,n,a)}},h.prototype._trackLength=function(e,n,a){var i=0;null!=a.knownLength?i+=Number(a.knownLength):Buffer.isBuffer(n)?i=n.length:"string"==typeof n&&(i=Buffer.byteLength(n)),this._valueLength+=i,this._overheadLength+=Buffer.byteLength(e)+h.LINE_BREAK.length,n&&(n.path||n.readable&&x(n,"httpVersion")||n instanceof l)&&(a.knownLength||this._valuesToMeasure.push(n))},h.prototype._lengthRetriever=function(e,n){x(e,"fd")?null!=e.end&&e.end!=1/0&&null!=e.start?n(null,e.end+1-(e.start?e.start:0)):p.stat(e.path,(function(a,i){if(a)n(a);else{var t=i.size-(e.start?e.start:0);n(null,t)}})):x(e,"httpVersion")?n(null,Number(e.headers["content-length"])):x(e,"httpModule")?(e.on("response",(function(a){e.pause(),n(null,Number(a.headers["content-length"]))})),e.resume()):n("Unknown stream")},h.prototype._multiPartHeader=function(e,n,a){if("string"==typeof a.header)return a.header;var i,t=this._getContentDisposition(n,a),o=this._getContentType(n,a),s="",r={"Content-Disposition":["form-data",'name="'+e+'"'].concat(t||[]),"Content-Type":[].concat(o||[])};for(var c in"object"==typeof a.header&&v(r,a.header),r)if(x(r,c)){if(null==(i=r[c]))continue;Array.isArray(i)||(i=[i]),i.length&&(s+=c+": "+i.join("; ")+h.LINE_BREAK)}return"--"+this.getBoundary()+h.LINE_BREAK+s+h.LINE_BREAK},h.prototype._getContentDisposition=function(e,n){var a;if("string"==typeof n.filepath?a=o.normalize(n.filepath).replace(/\\/g,"/"):n.filename||e&&(e.name||e.path)?a=o.basename(n.filename||e&&(e.name||e.path)):e&&e.readable&&x(e,"httpVersion")&&(a=o.basename(e.client._httpMessage.path||"")),a)return'filename="'+a+'"'},h.prototype._getContentType=function(e,n){var a=n.contentType;return!a&&e&&e.name&&(a=d.lookup(e.name)),!a&&e&&e.path&&(a=d.lookup(e.path)),!a&&e&&e.readable&&x(e,"httpVersion")&&(a=e.headers["content-type"]),a||!n.filepath&&!n.filename||(a=d.lookup(n.filepath||n.filename)),!a&&e&&"object"==typeof e&&(a=h.DEFAULT_CONTENT_TYPE),a},h.prototype._multiPartFooter=function(){return function(e){var n=h.LINE_BREAK;0===this._streams.length&&(n+=this._lastBoundary()),e(n)}.bind(this)},h.prototype._lastBoundary=function(){return"--"+this.getBoundary()+"--"+h.LINE_BREAK},h.prototype.getHeaders=function(e){var n,a={"content-type":"multipart/form-data; boundary="+this.getBoundary()};for(n in e)x(e,n)&&(a[n.toLowerCase()]=e[n]);return a},h.prototype.setBoundary=function(e){if("string"!=typeof e)throw new TypeError("FormData boundary must be a string");this._boundary=e},h.prototype.getBoundary=function(){return this._boundary||this._generateBoundary(),this._boundary},h.prototype.getBuffer=function(){for(var e=new Buffer.alloc(0),n=this.getBoundary(),a=0,i=this._streams.length;a<i;a++)"function"!=typeof this._streams[a]&&(e=Buffer.isBuffer(this._streams[a])?Buffer.concat([e,this._streams[a]]):Buffer.concat([e,Buffer.from(this._streams[a])]),"string"==typeof this._streams[a]&&this._streams[a].substring(2,n.length+2)===n||(e=Buffer.concat([e,Buffer.from(h.LINE_BREAK)])));return Buffer.concat([e,Buffer.from(this._lastBoundary())])},h.prototype._generateBoundary=function(){this._boundary="--------------------------"+u.randomBytes(12).toString("hex")},h.prototype.getLengthSync=function(){var e=this._overheadLength+this._valueLength;return this._streams.length&&(e+=this._lastBoundary().length),this.hasKnownLength()||this._error(new Error("Cannot calculate proper length in synchronous way.")),e},h.prototype.hasKnownLength=function(){var e=!0;return this._valuesToMeasure.length&&(e=!1),e},h.prototype.getLength=function(e){var n=this._overheadLength+this._valueLength;this._streams.length&&(n+=this._lastBoundary().length),this._valuesToMeasure.length?m.parallel(this._valuesToMeasure,this._lengthRetriever,(function(a,i){a?e(a):(i.forEach((function(e){n+=e})),e(null,n))})):process.nextTick(e.bind(this,null,n))},h.prototype.submit=function(e,n){var a,i,t={method:"post"};return"string"==typeof e?(e=c(e),i=v({port:e.port,path:e.pathname,host:e.hostname,protocol:e.protocol},t)):(i=v(e,t)).port||(i.port="https:"===i.protocol?443:80),i.headers=this.getHeaders(e.headers),a="https:"===i.protocol?r.request(i):s.request(i),this.getLength(function(e,i){if(e&&"Unknown stream"!==e)this._error(e);else if(i&&a.setHeader("Content-Length",i),this.pipe(a),n){var t,o=function(e,i){return a.removeListener("error",o),a.removeListener("response",t),n.call(this,e,i)};t=o.bind(this,null),a.on("error",o),a.on("response",t)}}.bind(this)),a},h.prototype._error=function(e){this.error||(this.error=e,this.pause(),this.emit("error",e))},h.prototype.toString=function(){return"[object FormData]"},f(h,"FormData"),e.exports=h},801:(e,n,a)=>{var i=a(9023),t=a(2203).Stream,o=a(8069);function s(){this.writable=!1,this.readable=!0,this.dataSize=0,this.maxDataSize=2097152,this.pauseStreams=!0,this._released=!1,this._streams=[],this._currentStream=null,this._insideLoop=!1,this._pendingNext=!1}e.exports=s,i.inherits(s,t),s.create=function(e){var n=new this;for(var a in e=e||{})n[a]=e[a];return n},s.isStreamLike=function(e){return"function"!=typeof e&&"string"!=typeof e&&"boolean"!=typeof e&&"number"!=typeof e&&!Buffer.isBuffer(e)},s.prototype.append=function(e){if(s.isStreamLike(e)){if(!(e instanceof o)){var n=o.create(e,{maxDataSize:1/0,pauseStream:this.pauseStreams});e.on("data",this._checkDataSize.bind(this)),e=n}this._handleErrors(e),this.pauseStreams&&e.pause()}return this._streams.push(e),this},s.prototype.pipe=function(e,n){return t.prototype.pipe.call(this,e,n),this.resume(),e},s.prototype._getNext=function(){if(this._currentStream=null,this._insideLoop)this._pendingNext=!0;else{this._insideLoop=!0;try{do{this._pendingNext=!1,this._realGetNext()}while(this._pendingNext)}finally{this._insideLoop=!1}}},s.prototype._realGetNext=function(){var e=this._streams.shift();void 0!==e?"function"==typeof e?e(function(e){s.isStreamLike(e)&&(e.on("data",this._checkDataSize.bind(this)),this._handleErrors(e)),this._pipeNext(e)}.bind(this)):this._pipeNext(e):this.end()},s.prototype._pipeNext=function(e){if(this._currentStream=e,s.isStreamLike(e))return e.on("end",this._getNext.bind(this)),void e.pipe(this,{end:!1});var n=e;this.write(n),this._getNext()},s.prototype._handleErrors=function(e){var n=this;e.on("error",(function(e){n._emitError(e)}))},s.prototype.write=function(e){this.emit("data",e)},s.prototype.pause=function(){this.pauseStreams&&(this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.pause&&this._currentStream.pause(),this.emit("pause"))},s.prototype.resume=function(){this._released||(this._released=!0,this.writable=!0,this._getNext()),this.pauseStreams&&this._currentStream&&"function"==typeof this._currentStream.resume&&this._currentStream.resume(),this.emit("resume")},s.prototype.end=function(){this._reset(),this.emit("end")},s.prototype.destroy=function(){this._reset(),this.emit("close")},s.prototype._reset=function(){this.writable=!1,this._streams=[],this._currentStream=null},s.prototype._checkDataSize=function(){if(this._updateDataSize(),!(this.dataSize<=this.maxDataSize)){var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this._emitError(new Error(e))}},s.prototype._updateDataSize=function(){this.dataSize=0;var e=this;this._streams.forEach((function(n){n.dataSize&&(e.dataSize+=n.dataSize)})),this._currentStream&&this._currentStream.dataSize&&(this.dataSize+=this._currentStream.dataSize)},s.prototype._emitError=function(e){this._reset(),this.emit("error",e)}},857:e=>{"use strict";e.exports=require("os")},1002:e=>{"use strict";e.exports=Function.prototype.apply},1013:(e,n,a)=>{var i=a(7372).stringify,t=a(8146);e.exports=function(e){return{parse:t(e),stringify:i}},e.exports.parse=t(),e.exports.stringify=i},1064:(e,n,a)=>{"use strict";var i=a(9612);e.exports=i.getPrototypeOf||null},1237:e=>{"use strict";e.exports=EvalError},1254:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Statistic=void 0,function(e){!function(e){e.SentCampaign="Campaign",e.ABTesting="AX",e.Draft="NL"}(e.CampaignOverviewIDType||(e.CampaignOverviewIDType={})),function(e){e.Tool="tool",e.HTML="html",e.Tool2="tool2",e.HTML2="html2",e.MJML="mjml"}(e.CampaignOverviewEditMode||(e.CampaignOverviewEditMode={})),function(e){e.Full="full",e.Unknown="unknown"}(e.CampaignOverviewEditType||(e.CampaignOverviewEditType={})),function(e){e.Campaign="Campaign",e.APIKey="APIKey",e.List="List",e.Sender="Sender"}(e.CounterSource||(e.CounterSource={})),function(e){e.Highest="Highest",e.Hour="Hour",e.Day="Day",e.Lifetime="Lifetime"}(e.CounterResolution||(e.CounterResolution={})),function(e){e.Message="Message",e.Event="Event"}(e.CounterTiming||(e.CounterTiming={})),function(e){e.Open="open",e.Click="click"}(e.EmailEvent||(e.EmailEvent={}))}(n.Statistic||(n.Statistic={}))},1333:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},n=Symbol("test"),a=Object(n);if("string"==typeof n)return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;if("[object Symbol]"!==Object.prototype.toString.call(a))return!1;for(var i in e[n]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var t=Object.getOwnPropertySymbols(e);if(1!==t.length||t[0]!==n)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,n))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,n);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},1362:e=>{"use strict";e.exports=function(e,n){return Object.keys(n).forEach((function(a){e[a]=e[a]||n[a]})),e}},1375:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Message=void 0,function(e){!function(e){e[e.UserUnknown=1]="UserUnknown",e[e.MailboxInactive=2]="MailboxInactive",e[e.QuotaExceeded=3]="QuotaExceeded",e[e.InvalidDomain=4]="InvalidDomain",e[e.NoMailHost=5]="NoMailHost",e[e.RelayOrAccessDenied=6]="RelayOrAccessDenied",e[e.SenderBlocked=7]="SenderBlocked",e[e.ContentBlocked=8]="ContentBlocked",e[e.PolicyIssue=9]="PolicyIssue",e[e.SystemIssue=10]="SystemIssue",e[e.ProtocolIssue=11]="ProtocolIssue",e[e.ConnectionIssue=12]="ConnectionIssue",e[e.GreyListed=13]="GreyListed",e[e.PreBlocked=14]="PreBlocked",e[e.DuplicateInCampaign=15]="DuplicateInCampaign",e[e.SpamPreBlocked=16]="SpamPreBlocked",e[e.BadOrEmptyTemplate=17]="BadOrEmptyTemplate",e[e.ErrorInTemplateLanguage=18]="ErrorInTemplateLanguage",e[e.TypoFix=19]="TypoFix",e[e.BlackListed=20]="BlackListed",e[e.SpamReporter=21]="SpamReporter"}(e.MessageState||(e.MessageState={})),function(e){e[e.Transactional=1]="Transactional",e[e.Marketing=2]="Marketing",e[e.Unknown=3]="Unknown"}(e.FromType||(e.FromType={})),function(e){e[e.Processed=0]="Processed",e[e.Queued=1]="Queued",e[e.Sent=2]="Sent",e[e.Opened=3]="Opened",e[e.Clicked=4]="Clicked",e[e.Bounce=5]="Bounce",e[e.Spam=6]="Spam",e[e.Unsub=7]="Unsub",e[e.Blocked=8]="Blocked",e[e.SoftBounce=9]="SoftBounce",e[e.HardBounce=10]="HardBounce",e[e.Deferred=11]="Deferred"}(e.MessageStatus||(e.MessageStatus={})),function(e){e.Unknown="unknown",e.Queued="queued",e.Sent="sent",e.Opened="opened",e.Clicked="clicked",e.Bounce="bounce",e.Spam="spam",e.Unsub="unsub",e.Blocked="blocked",e.HardBounced="hardbounced",e.SoftBounced="softbounced",e.Deferred="deferred"}(e.CurrentMessageStatus||(e.CurrentMessageStatus={})),function(e){e.Sent="sent",e.Opened="opened",e.Clicked="clicked",e.Bounced="bounced",e.Blocked="blocked",e.Unsub="unsub",e.Spam="spam"}(e.EventType||(e.EventType={}))}(n.Message||(n.Message={}))},1514:e=>{"use strict";e.exports=Math.abs},1594:function(e,n,a){var i;!function(){"use strict";var t,o=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,s=Math.ceil,r=Math.floor,c="[BigNumber Error] ",p=c+"Number primitive has more than 15 significant digits: ",l=1e14,u=14,d=9007199254740991,m=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],f=1e7,x=1e9;function v(e){var n=0|e;return e>0||e===n?n:n-1}function h(e){for(var n,a,i=1,t=e.length,o=e[0]+"";i<t;){for(n=e[i++]+"",a=u-n.length;a--;n="0"+n);o+=n}for(t=o.length;48===o.charCodeAt(--t););return o.slice(0,t+1||1)}function b(e,n){var a,i,t=e.c,o=n.c,s=e.s,r=n.s,c=e.e,p=n.e;if(!s||!r)return null;if(a=t&&!t[0],i=o&&!o[0],a||i)return a?i?0:-r:s;if(s!=r)return s;if(a=s<0,i=c==p,!t||!o)return i?0:!t^a?1:-1;if(!i)return c>p^a?1:-1;for(r=(c=t.length)<(p=o.length)?c:p,s=0;s<r;s++)if(t[s]!=o[s])return t[s]>o[s]^a?1:-1;return c==p?0:c>p^a?1:-1}function g(e,n,a,i){if(e<n||e>a||e!==r(e))throw Error(c+(i||"Argument")+("number"==typeof e?e<n||e>a?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function y(e){var n=e.c.length-1;return v(e.e/u)==n&&e.c[n]%2!=0}function w(e,n){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(n<0?"e":"e+")+n}function k(e,n,a){var i,t;if(n<0){for(t=a+".";++n;t+=a);e=t+e}else if(++n>(i=e.length)){for(t=a,n-=i;--n;t+=a);e+=t}else n<i&&(e=e.slice(0,n)+"."+e.slice(n));return e}t=function e(n){var a,i,t,j,S,_,E,O,A,C,R=H.prototype={constructor:H,toString:null,valueOf:null},T=new H(1),P=20,F=4,B=-7,N=21,U=-1e7,L=1e7,z=!1,I=1,D=0,M={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},q="0123456789abcdefghijklmnopqrstuvwxyz";function H(e,n){var a,s,c,l,m,f,x,v,h=this;if(!(h instanceof H))return new H(e,n);if(null==n){if(e&&!0===e._isBigNumber)return h.s=e.s,void(!e.c||e.e>L?h.c=h.e=null:e.e<U?h.c=[h.e=0]:(h.e=e.e,h.c=e.c.slice()));if((f="number"==typeof e)&&0*e==0){if(h.s=1/e<0?(e=-e,-1):1,e===~~e){for(l=0,m=e;m>=10;m/=10,l++);return void(l>L?h.c=h.e=null:(h.e=l,h.c=[e]))}v=String(e)}else{if(!o.test(v=String(e)))return t(h,v,f);h.s=45==v.charCodeAt(0)?(v=v.slice(1),-1):1}(l=v.indexOf("."))>-1&&(v=v.replace(".","")),(m=v.search(/e/i))>0?(l<0&&(l=m),l+=+v.slice(m+1),v=v.substring(0,m)):l<0&&(l=v.length)}else{if(g(n,2,q.length,"Base"),10==n)return W(h=new H(e),P+h.e+1,F);if(v=String(e),f="number"==typeof e){if(0*e!=0)return t(h,v,f,n);if(h.s=1/e<0?(v=v.slice(1),-1):1,H.DEBUG&&v.replace(/^0\.0*|\./,"").length>15)throw Error(p+e)}else h.s=45===v.charCodeAt(0)?(v=v.slice(1),-1):1;for(a=q.slice(0,n),l=m=0,x=v.length;m<x;m++)if(a.indexOf(s=v.charAt(m))<0){if("."==s){if(m>l){l=x;continue}}else if(!c&&(v==v.toUpperCase()&&(v=v.toLowerCase())||v==v.toLowerCase()&&(v=v.toUpperCase()))){c=!0,m=-1,l=0;continue}return t(h,String(e),f,n)}f=!1,(l=(v=i(v,n,10,h.s)).indexOf("."))>-1?v=v.replace(".",""):l=v.length}for(m=0;48===v.charCodeAt(m);m++);for(x=v.length;48===v.charCodeAt(--x););if(v=v.slice(m,++x)){if(x-=m,f&&H.DEBUG&&x>15&&(e>d||e!==r(e)))throw Error(p+h.s*e);if((l=l-m-1)>L)h.c=h.e=null;else if(l<U)h.c=[h.e=0];else{if(h.e=l,h.c=[],m=(l+1)%u,l<0&&(m+=u),m<x){for(m&&h.c.push(+v.slice(0,m)),x-=u;m<x;)h.c.push(+v.slice(m,m+=u));m=u-(v=v.slice(m)).length}else m-=x;for(;m--;v+="0");h.c.push(+v)}}else h.c=[h.e=0]}function V(e,n,a,i){var t,o,s,r,c;if(null==a?a=F:g(a,0,8),!e.c)return e.toString();if(t=e.c[0],s=e.e,null==n)c=h(e.c),c=1==i||2==i&&(s<=B||s>=N)?w(c,s):k(c,s,"0");else if(o=(e=W(new H(e),n,a)).e,r=(c=h(e.c)).length,1==i||2==i&&(n<=o||o<=B)){for(;r<n;c+="0",r++);c=w(c,o)}else if(n-=s,c=k(c,o,"0"),o+1>r){if(--n>0)for(c+=".";n--;c+="0");}else if((n+=o-r)>0)for(o+1==r&&(c+=".");n--;c+="0");return e.s<0&&t?"-"+c:c}function G(e,n){for(var a,i=1,t=new H(e[0]);i<e.length;i++){if(!(a=new H(e[i])).s){t=a;break}n.call(t,a)&&(t=a)}return t}function K(e,n,a){for(var i=1,t=n.length;!n[--t];n.pop());for(t=n[0];t>=10;t/=10,i++);return(a=i+a*u-1)>L?e.c=e.e=null:a<U?e.c=[e.e=0]:(e.e=a,e.c=n),e}function W(e,n,a,i){var t,o,c,p,d,f,x,v=e.c,h=m;if(v){e:{for(t=1,p=v[0];p>=10;p/=10,t++);if((o=n-t)<0)o+=u,c=n,x=(d=v[f=0])/h[t-c-1]%10|0;else if((f=s((o+1)/u))>=v.length){if(!i)break e;for(;v.length<=f;v.push(0));d=x=0,t=1,c=(o%=u)-u+1}else{for(d=p=v[f],t=1;p>=10;p/=10,t++);x=(c=(o%=u)-u+t)<0?0:d/h[t-c-1]%10|0}if(i=i||n<0||null!=v[f+1]||(c<0?d:d%h[t-c-1]),i=a<4?(x||i)&&(0==a||a==(e.s<0?3:2)):x>5||5==x&&(4==a||i||6==a&&(o>0?c>0?d/h[t-c]:0:v[f-1])%10&1||a==(e.s<0?8:7)),n<1||!v[0])return v.length=0,i?(n-=e.e+1,v[0]=h[(u-n%u)%u],e.e=-n||0):v[0]=e.e=0,e;if(0==o?(v.length=f,p=1,f--):(v.length=f+1,p=h[u-o],v[f]=c>0?r(d/h[t-c]%h[c])*p:0),i)for(;;){if(0==f){for(o=1,c=v[0];c>=10;c/=10,o++);for(c=v[0]+=p,p=1;c>=10;c/=10,p++);o!=p&&(e.e++,v[0]==l&&(v[0]=1));break}if(v[f]+=p,v[f]!=l)break;v[f--]=0,p=1}for(o=v.length;0===v[--o];v.pop());}e.e>L?e.c=e.e=null:e.e<U&&(e.c=[e.e=0])}return e}function $(e){var n,a=e.e;return null===a?e.toString():(n=h(e.c),n=a<=B||a>=N?w(n,a):k(n,a,"0"),e.s<0?"-"+n:n)}return H.clone=e,H.ROUND_UP=0,H.ROUND_DOWN=1,H.ROUND_CEIL=2,H.ROUND_FLOOR=3,H.ROUND_HALF_UP=4,H.ROUND_HALF_DOWN=5,H.ROUND_HALF_EVEN=6,H.ROUND_HALF_CEIL=7,H.ROUND_HALF_FLOOR=8,H.EUCLID=9,H.config=H.set=function(e){var n,a;if(null!=e){if("object"!=typeof e)throw Error(c+"Object expected: "+e);if(e.hasOwnProperty(n="DECIMAL_PLACES")&&(g(a=e[n],0,x,n),P=a),e.hasOwnProperty(n="ROUNDING_MODE")&&(g(a=e[n],0,8,n),F=a),e.hasOwnProperty(n="EXPONENTIAL_AT")&&((a=e[n])&&a.pop?(g(a[0],-x,0,n),g(a[1],0,x,n),B=a[0],N=a[1]):(g(a,-x,x,n),B=-(N=a<0?-a:a))),e.hasOwnProperty(n="RANGE"))if((a=e[n])&&a.pop)g(a[0],-x,-1,n),g(a[1],1,x,n),U=a[0],L=a[1];else{if(g(a,-x,x,n),!a)throw Error(c+n+" cannot be zero: "+a);U=-(L=a<0?-a:a)}if(e.hasOwnProperty(n="CRYPTO")){if((a=e[n])!==!!a)throw Error(c+n+" not true or false: "+a);if(a){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw z=!a,Error(c+"crypto unavailable");z=a}else z=a}if(e.hasOwnProperty(n="MODULO_MODE")&&(g(a=e[n],0,9,n),I=a),e.hasOwnProperty(n="POW_PRECISION")&&(g(a=e[n],0,x,n),D=a),e.hasOwnProperty(n="FORMAT")){if("object"!=typeof(a=e[n]))throw Error(c+n+" not an object: "+a);M=a}if(e.hasOwnProperty(n="ALPHABET")){if("string"!=typeof(a=e[n])||/^.?$|[+\-.\s]|(.).*\1/.test(a))throw Error(c+n+" invalid: "+a);q=a}}return{DECIMAL_PLACES:P,ROUNDING_MODE:F,EXPONENTIAL_AT:[B,N],RANGE:[U,L],CRYPTO:z,MODULO_MODE:I,POW_PRECISION:D,FORMAT:M,ALPHABET:q}},H.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!H.DEBUG)return!0;var n,a,i=e.c,t=e.e,o=e.s;e:if("[object Array]"=={}.toString.call(i)){if((1===o||-1===o)&&t>=-x&&t<=x&&t===r(t)){if(0===i[0]){if(0===t&&1===i.length)return!0;break e}if((n=(t+1)%u)<1&&(n+=u),String(i[0]).length==n){for(n=0;n<i.length;n++)if((a=i[n])<0||a>=l||a!==r(a))break e;if(0!==a)return!0}}}else if(null===i&&null===t&&(null===o||1===o||-1===o))return!0;throw Error(c+"Invalid BigNumber: "+e)},H.maximum=H.max=function(){return G(arguments,R.lt)},H.minimum=H.min=function(){return G(arguments,R.gt)},H.random=(j=9007199254740992,S=Math.random()*j&2097151?function(){return r(Math.random()*j)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var n,a,i,t,o,p=0,l=[],d=new H(T);if(null==e?e=P:g(e,0,x),t=s(e/u),z)if(crypto.getRandomValues){for(n=crypto.getRandomValues(new Uint32Array(t*=2));p<t;)(o=131072*n[p]+(n[p+1]>>>11))>=9e15?(a=crypto.getRandomValues(new Uint32Array(2)),n[p]=a[0],n[p+1]=a[1]):(l.push(o%1e14),p+=2);p=t/2}else{if(!crypto.randomBytes)throw z=!1,Error(c+"crypto unavailable");for(n=crypto.randomBytes(t*=7);p<t;)(o=281474976710656*(31&n[p])+1099511627776*n[p+1]+4294967296*n[p+2]+16777216*n[p+3]+(n[p+4]<<16)+(n[p+5]<<8)+n[p+6])>=9e15?crypto.randomBytes(7).copy(n,p):(l.push(o%1e14),p+=7);p=t/7}if(!z)for(;p<t;)(o=S())<9e15&&(l[p++]=o%1e14);for(t=l[--p],e%=u,t&&e&&(o=m[u-e],l[p]=r(t/o)*o);0===l[p];l.pop(),p--);if(p<0)l=[i=0];else{for(i=-1;0===l[0];l.splice(0,1),i-=u);for(p=1,o=l[0];o>=10;o/=10,p++);p<u&&(i-=u-p)}return d.e=i,d.c=l,d}),H.sum=function(){for(var e=1,n=arguments,a=new H(n[0]);e<n.length;)a=a.plus(n[e++]);return a},i=function(){var e="0123456789";function n(e,n,a,i){for(var t,o,s=[0],r=0,c=e.length;r<c;){for(o=s.length;o--;s[o]*=n);for(s[0]+=i.indexOf(e.charAt(r++)),t=0;t<s.length;t++)s[t]>a-1&&(null==s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/a|0,s[t]%=a)}return s.reverse()}return function(i,t,o,s,r){var c,p,l,u,d,m,f,x,v=i.indexOf("."),b=P,g=F;for(v>=0&&(u=D,D=0,i=i.replace(".",""),m=(x=new H(t)).pow(i.length-v),D=u,x.c=n(k(h(m.c),m.e,"0"),10,o,e),x.e=x.c.length),l=u=(f=n(i,t,o,r?(c=q,e):(c=e,q))).length;0==f[--u];f.pop());if(!f[0])return c.charAt(0);if(v<0?--l:(m.c=f,m.e=l,m.s=s,f=(m=a(m,x,b,g,o)).c,d=m.r,l=m.e),v=f[p=l+b+1],u=o/2,d=d||p<0||null!=f[p+1],d=g<4?(null!=v||d)&&(0==g||g==(m.s<0?3:2)):v>u||v==u&&(4==g||d||6==g&&1&f[p-1]||g==(m.s<0?8:7)),p<1||!f[0])i=d?k(c.charAt(1),-b,c.charAt(0)):c.charAt(0);else{if(f.length=p,d)for(--o;++f[--p]>o;)f[p]=0,p||(++l,f=[1].concat(f));for(u=f.length;!f[--u];);for(v=0,i="";v<=u;i+=c.charAt(f[v++]));i=k(i,l,c.charAt(0))}return i}}(),a=function(){function e(e,n,a){var i,t,o,s,r=0,c=e.length,p=n%f,l=n/f|0;for(e=e.slice();c--;)r=((t=p*(o=e[c]%f)+(i=l*o+(s=e[c]/f|0)*p)%f*f+r)/a|0)+(i/f|0)+l*s,e[c]=t%a;return r&&(e=[r].concat(e)),e}function n(e,n,a,i){var t,o;if(a!=i)o=a>i?1:-1;else for(t=o=0;t<a;t++)if(e[t]!=n[t]){o=e[t]>n[t]?1:-1;break}return o}function a(e,n,a,i){for(var t=0;a--;)e[a]-=t,t=e[a]<n[a]?1:0,e[a]=t*i+e[a]-n[a];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(i,t,o,s,c){var p,d,m,f,x,h,b,g,y,w,k,j,S,_,E,O,A,C=i.s==t.s?1:-1,R=i.c,T=t.c;if(!(R&&R[0]&&T&&T[0]))return new H(i.s&&t.s&&(R?!T||R[0]!=T[0]:T)?R&&0==R[0]||!T?0*C:C/0:NaN);for(y=(g=new H(C)).c=[],C=o+(d=i.e-t.e)+1,c||(c=l,d=v(i.e/u)-v(t.e/u),C=C/u|0),m=0;T[m]==(R[m]||0);m++);if(T[m]>(R[m]||0)&&d--,C<0)y.push(1),f=!0;else{for(_=R.length,O=T.length,m=0,C+=2,(x=r(c/(T[0]+1)))>1&&(T=e(T,x,c),R=e(R,x,c),O=T.length,_=R.length),S=O,k=(w=R.slice(0,O)).length;k<O;w[k++]=0);A=T.slice(),A=[0].concat(A),E=T[0],T[1]>=c/2&&E++;do{if(x=0,(p=n(T,w,O,k))<0){if(j=w[0],O!=k&&(j=j*c+(w[1]||0)),(x=r(j/E))>1)for(x>=c&&(x=c-1),b=(h=e(T,x,c)).length,k=w.length;1==n(h,w,b,k);)x--,a(h,O<b?A:T,b,c),b=h.length,p=1;else 0==x&&(p=x=1),b=(h=T.slice()).length;if(b<k&&(h=[0].concat(h)),a(w,h,k,c),k=w.length,-1==p)for(;n(T,w,O,k)<1;)x++,a(w,O<k?A:T,k,c),k=w.length}else 0===p&&(x++,w=[0]);y[m++]=x,w[0]?w[k++]=R[S]||0:(w=[R[S]],k=1)}while((S++<_||null!=w[0])&&C--);f=null!=w[0],y[0]||y.splice(0,1)}if(c==l){for(m=1,C=y[0];C>=10;C/=10,m++);W(g,o+(g.e=m+d*u-1)+1,s,f)}else g.e=d,g.r=+f;return g}}(),_=/^(-?)0([xbo])(?=\w[\w.]*$)/i,E=/^([^.]+)\.$/,O=/^\.([^.]+)$/,A=/^-?(Infinity|NaN)$/,C=/^\s*\+(?=[\w.])|^\s+|\s+$/g,t=function(e,n,a,i){var t,o=a?n:n.replace(C,"");if(A.test(o))e.s=isNaN(o)?null:o<0?-1:1;else{if(!a&&(o=o.replace(_,(function(e,n,a){return t="x"==(a=a.toLowerCase())?16:"b"==a?2:8,i&&i!=t?e:n})),i&&(t=i,o=o.replace(E,"$1").replace(O,"0.$1")),n!=o))return new H(o,t);if(H.DEBUG)throw Error(c+"Not a"+(i?" base "+i:"")+" number: "+n);e.s=null}e.c=e.e=null},R.absoluteValue=R.abs=function(){var e=new H(this);return e.s<0&&(e.s=1),e},R.comparedTo=function(e,n){return b(this,new H(e,n))},R.decimalPlaces=R.dp=function(e,n){var a,i,t,o=this;if(null!=e)return g(e,0,x),null==n?n=F:g(n,0,8),W(new H(o),e+o.e+1,n);if(!(a=o.c))return null;if(i=((t=a.length-1)-v(this.e/u))*u,t=a[t])for(;t%10==0;t/=10,i--);return i<0&&(i=0),i},R.dividedBy=R.div=function(e,n){return a(this,new H(e,n),P,F)},R.dividedToIntegerBy=R.idiv=function(e,n){return a(this,new H(e,n),0,1)},R.exponentiatedBy=R.pow=function(e,n){var a,i,t,o,p,l,d,m,f=this;if((e=new H(e)).c&&!e.isInteger())throw Error(c+"Exponent not an integer: "+$(e));if(null!=n&&(n=new H(n)),p=e.e>14,!f.c||!f.c[0]||1==f.c[0]&&!f.e&&1==f.c.length||!e.c||!e.c[0])return m=new H(Math.pow(+$(f),p?2-y(e):+$(e))),n?m.mod(n):m;if(l=e.s<0,n){if(n.c?!n.c[0]:!n.s)return new H(NaN);(i=!l&&f.isInteger()&&n.isInteger())&&(f=f.mod(n))}else{if(e.e>9&&(f.e>0||f.e<-1||(0==f.e?f.c[0]>1||p&&f.c[1]>=24e7:f.c[0]<8e13||p&&f.c[0]<=9999975e7)))return o=f.s<0&&y(e)?-0:0,f.e>-1&&(o=1/o),new H(l?1/o:o);D&&(o=s(D/u+2))}for(p?(a=new H(.5),l&&(e.s=1),d=y(e)):d=(t=Math.abs(+$(e)))%2,m=new H(T);;){if(d){if(!(m=m.times(f)).c)break;o?m.c.length>o&&(m.c.length=o):i&&(m=m.mod(n))}if(t){if(0===(t=r(t/2)))break;d=t%2}else if(W(e=e.times(a),e.e+1,1),e.e>14)d=y(e);else{if(0==(t=+$(e)))break;d=t%2}f=f.times(f),o?f.c&&f.c.length>o&&(f.c.length=o):i&&(f=f.mod(n))}return i?m:(l&&(m=T.div(m)),n?m.mod(n):o?W(m,D,F,void 0):m)},R.integerValue=function(e){var n=new H(this);return null==e?e=F:g(e,0,8),W(n,n.e+1,e)},R.isEqualTo=R.eq=function(e,n){return 0===b(this,new H(e,n))},R.isFinite=function(){return!!this.c},R.isGreaterThan=R.gt=function(e,n){return b(this,new H(e,n))>0},R.isGreaterThanOrEqualTo=R.gte=function(e,n){return 1===(n=b(this,new H(e,n)))||0===n},R.isInteger=function(){return!!this.c&&v(this.e/u)>this.c.length-2},R.isLessThan=R.lt=function(e,n){return b(this,new H(e,n))<0},R.isLessThanOrEqualTo=R.lte=function(e,n){return-1===(n=b(this,new H(e,n)))||0===n},R.isNaN=function(){return!this.s},R.isNegative=function(){return this.s<0},R.isPositive=function(){return this.s>0},R.isZero=function(){return!!this.c&&0==this.c[0]},R.minus=function(e,n){var a,i,t,o,s=this,r=s.s;if(n=(e=new H(e,n)).s,!r||!n)return new H(NaN);if(r!=n)return e.s=-n,s.plus(e);var c=s.e/u,p=e.e/u,d=s.c,m=e.c;if(!c||!p){if(!d||!m)return d?(e.s=-n,e):new H(m?s:NaN);if(!d[0]||!m[0])return m[0]?(e.s=-n,e):new H(d[0]?s:3==F?-0:0)}if(c=v(c),p=v(p),d=d.slice(),r=c-p){for((o=r<0)?(r=-r,t=d):(p=c,t=m),t.reverse(),n=r;n--;t.push(0));t.reverse()}else for(i=(o=(r=d.length)<(n=m.length))?r:n,r=n=0;n<i;n++)if(d[n]!=m[n]){o=d[n]<m[n];break}if(o&&(t=d,d=m,m=t,e.s=-e.s),(n=(i=m.length)-(a=d.length))>0)for(;n--;d[a++]=0);for(n=l-1;i>r;){if(d[--i]<m[i]){for(a=i;a&&!d[--a];d[a]=n);--d[a],d[i]+=l}d[i]-=m[i]}for(;0==d[0];d.splice(0,1),--p);return d[0]?K(e,d,p):(e.s=3==F?-1:1,e.c=[e.e=0],e)},R.modulo=R.mod=function(e,n){var i,t,o=this;return e=new H(e,n),!o.c||!e.s||e.c&&!e.c[0]?new H(NaN):!e.c||o.c&&!o.c[0]?new H(o):(9==I?(t=e.s,e.s=1,i=a(o,e,0,3),e.s=t,i.s*=t):i=a(o,e,0,I),(e=o.minus(i.times(e))).c[0]||1!=I||(e.s=o.s),e)},R.multipliedBy=R.times=function(e,n){var a,i,t,o,s,r,c,p,d,m,x,h,b,g,y,w=this,k=w.c,j=(e=new H(e,n)).c;if(!(k&&j&&k[0]&&j[0]))return!w.s||!e.s||k&&!k[0]&&!j||j&&!j[0]&&!k?e.c=e.e=e.s=null:(e.s*=w.s,k&&j?(e.c=[0],e.e=0):e.c=e.e=null),e;for(i=v(w.e/u)+v(e.e/u),e.s*=w.s,(c=k.length)<(m=j.length)&&(b=k,k=j,j=b,t=c,c=m,m=t),t=c+m,b=[];t--;b.push(0));for(g=l,y=f,t=m;--t>=0;){for(a=0,x=j[t]%y,h=j[t]/y|0,o=t+(s=c);o>t;)a=((p=x*(p=k[--s]%y)+(r=h*p+(d=k[s]/y|0)*x)%y*y+b[o]+a)/g|0)+(r/y|0)+h*d,b[o--]=p%g;b[o]=a}return a?++i:b.splice(0,1),K(e,b,i)},R.negated=function(){var e=new H(this);return e.s=-e.s||null,e},R.plus=function(e,n){var a,i=this,t=i.s;if(n=(e=new H(e,n)).s,!t||!n)return new H(NaN);if(t!=n)return e.s=-n,i.minus(e);var o=i.e/u,s=e.e/u,r=i.c,c=e.c;if(!o||!s){if(!r||!c)return new H(t/0);if(!r[0]||!c[0])return c[0]?e:new H(r[0]?i:0*t)}if(o=v(o),s=v(s),r=r.slice(),t=o-s){for(t>0?(s=o,a=c):(t=-t,a=r),a.reverse();t--;a.push(0));a.reverse()}for((t=r.length)-(n=c.length)<0&&(a=c,c=r,r=a,n=t),t=0;n;)t=(r[--n]=r[n]+c[n]+t)/l|0,r[n]=l===r[n]?0:r[n]%l;return t&&(r=[t].concat(r),++s),K(e,r,s)},R.precision=R.sd=function(e,n){var a,i,t,o=this;if(null!=e&&e!==!!e)return g(e,1,x),null==n?n=F:g(n,0,8),W(new H(o),e,n);if(!(a=o.c))return null;if(i=(t=a.length-1)*u+1,t=a[t]){for(;t%10==0;t/=10,i--);for(t=a[0];t>=10;t/=10,i++);}return e&&o.e+1>i&&(i=o.e+1),i},R.shiftedBy=function(e){return g(e,-9007199254740991,d),this.times("1e"+e)},R.squareRoot=R.sqrt=function(){var e,n,i,t,o,s=this,r=s.c,c=s.s,p=s.e,l=P+4,u=new H("0.5");if(1!==c||!r||!r[0])return new H(!c||c<0&&(!r||r[0])?NaN:r?s:1/0);if(0==(c=Math.sqrt(+$(s)))||c==1/0?(((n=h(r)).length+p)%2==0&&(n+="0"),c=Math.sqrt(+n),p=v((p+1)/2)-(p<0||p%2),i=new H(n=c==1/0?"5e"+p:(n=c.toExponential()).slice(0,n.indexOf("e")+1)+p)):i=new H(c+""),i.c[0])for((c=(p=i.e)+l)<3&&(c=0);;)if(o=i,i=u.times(o.plus(a(s,o,l,1))),h(o.c).slice(0,c)===(n=h(i.c)).slice(0,c)){if(i.e<p&&--c,"9999"!=(n=n.slice(c-3,c+1))&&(t||"4999"!=n)){+n&&(+n.slice(1)||"5"!=n.charAt(0))||(W(i,i.e+P+2,1),e=!i.times(i).eq(s));break}if(!t&&(W(o,o.e+P+2,0),o.times(o).eq(s))){i=o;break}l+=4,c+=4,t=1}return W(i,i.e+P+1,F,e)},R.toExponential=function(e,n){return null!=e&&(g(e,0,x),e++),V(this,e,n,1)},R.toFixed=function(e,n){return null!=e&&(g(e,0,x),e=e+this.e+1),V(this,e,n)},R.toFormat=function(e,n,a){var i,t=this;if(null==a)null!=e&&n&&"object"==typeof n?(a=n,n=null):e&&"object"==typeof e?(a=e,e=n=null):a=M;else if("object"!=typeof a)throw Error(c+"Argument not an object: "+a);if(i=t.toFixed(e,n),t.c){var o,s=i.split("."),r=+a.groupSize,p=+a.secondaryGroupSize,l=a.groupSeparator||"",u=s[0],d=s[1],m=t.s<0,f=m?u.slice(1):u,x=f.length;if(p&&(o=r,r=p,p=o,x-=o),r>0&&x>0){for(o=x%r||r,u=f.substr(0,o);o<x;o+=r)u+=l+f.substr(o,r);p>0&&(u+=l+f.slice(o)),m&&(u="-"+u)}i=d?u+(a.decimalSeparator||"")+((p=+a.fractionGroupSize)?d.replace(new RegExp("\\d{"+p+"}\\B","g"),"$&"+(a.fractionGroupSeparator||"")):d):u}return(a.prefix||"")+i+(a.suffix||"")},R.toFraction=function(e){var n,i,t,o,s,r,p,l,d,f,x,v,b=this,g=b.c;if(null!=e&&(!(p=new H(e)).isInteger()&&(p.c||1!==p.s)||p.lt(T)))throw Error(c+"Argument "+(p.isInteger()?"out of range: ":"not an integer: ")+$(p));if(!g)return new H(b);for(n=new H(T),d=i=new H(T),t=l=new H(T),v=h(g),s=n.e=v.length-b.e-1,n.c[0]=m[(r=s%u)<0?u+r:r],e=!e||p.comparedTo(n)>0?s>0?n:d:p,r=L,L=1/0,p=new H(v),l.c[0]=0;f=a(p,n,0,1),1!=(o=i.plus(f.times(t))).comparedTo(e);)i=t,t=o,d=l.plus(f.times(o=d)),l=o,n=p.minus(f.times(o=n)),p=o;return o=a(e.minus(i),t,0,1),l=l.plus(o.times(d)),i=i.plus(o.times(t)),l.s=d.s=b.s,x=a(d,t,s*=2,F).minus(b).abs().comparedTo(a(l,i,s,F).minus(b).abs())<1?[d,t]:[l,i],L=r,x},R.toNumber=function(){return+$(this)},R.toPrecision=function(e,n){return null!=e&&g(e,1,x),V(this,e,n,2)},R.toString=function(e){var n,a=this,t=a.s,o=a.e;return null===o?t?(n="Infinity",t<0&&(n="-"+n)):n="NaN":(null==e?n=o<=B||o>=N?w(h(a.c),o):k(h(a.c),o,"0"):10===e?n=k(h((a=W(new H(a),P+o+1,F)).c),a.e,"0"):(g(e,2,q.length,"Base"),n=i(k(h(a.c),o,"0"),10,e,t,!0)),t<0&&a.c[0]&&(n="-"+n)),n},R.valueOf=R.toJSON=function(){return $(this)},R._isBigNumber=!0,null!=n&&H.set(n),H}(),t.default=t.BigNumber=t,void 0===(i=function(){return t}.call(n,a,n,e))||(e.exports=i)}()},1813:e=>{"use strict";e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/3gpphal+json":{"source":"iana","compressible":true},"application/3gpphalforms+json":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/ace+cbor":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/at+jwt":{"source":"iana"},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/captive+json":{"source":"iana","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/city+json":{"source":"iana","compressible":true},"application/clr":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true,"extensions":["cpl"]},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dash-patch+xml":{"source":"iana","compressible":true,"extensions":["mpp"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["es","ecma"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/elm+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/elm+xml":{"source":"iana","compressible":true},"application/emergencycalldata.cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/express":{"source":"iana","extensions":["exp"]},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/jscalendar+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true,"extensions":["mpf"]},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/missing-blocks+cbor-seq":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true},"application/mrb-publish+xml":{"source":"iana","compressible":true},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/oauth-authz-req+jwt":{"source":"iana"},"application/oblivious-dns-message":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/opc-nodeset+xml":{"source":"iana","compressible":true},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p21":{"source":"iana"},"application/p21+zip":{"source":"iana","compressible":false},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana","extensions":["asc"]},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.cyn":{"source":"iana","charset":"7-BIT"},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sarif+json":{"source":"iana","compressible":true},"application/sarif-external-properties+json":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spdx+json":{"source":"iana","compressible":true},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/token-introspection+jwt":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana","extensions":["trig"]},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ubjson":{"compressible":false,"extensions":["ubj"]},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true,"extensions":["td"]},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.5gnas":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gtpc":{"source":"iana"},"application/vnd.3gpp.interworking-data":{"source":"iana"},"application/vnd.3gpp.lpp":{"source":"iana"},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ngap":{"source":"iana"},"application/vnd.3gpp.pfcp":{"source":"iana"},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.s1ap":{"source":"iana"},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.cmoca-cmresource":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-cmtable":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.age":{"source":"iana","extensions":["age"]},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.arrow.file":{"source":"iana"},"application/vnd.apache.arrow.stream":{"source":"iana"},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["key"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.cryptomator.encrypted":{"source":"iana"},"application/vnd.cryptomator.vault":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.cyclonedx+json":{"source":"iana","compressible":true},"application/vnd.cyclonedx+xml":{"source":"iana","compressible":true},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.d3m-dataset":{"source":"iana"},"application/vnd.d3m-problem":{"source":"iana"},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana","extensions":["dbf"]},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.eclipse.ditto+json":{"source":"iana","compressible":true},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eu.kasparian.car+json":{"source":"iana","compressible":true},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.familysearch.gedcom+zip":{"source":"iana","compressible":false},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujifilm.fb.docuworks":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.binder":{"source":"iana"},"application/vnd.fujifilm.fb.docuworks.container":{"source":"iana"},"application/vnd.fujifilm.fb.jfi+xml":{"source":"iana","compressible":true},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.slides":{"source":"iana"},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hl7cda+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hl7v2+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana","extensions":["mvt"]},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxar.archive.3tz+zip":{"source":"iana","compressible":false},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.nacamar.ybrid+json":{"source":"iana","compressible":true},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nebumind.line":{"source":"iana"},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+cbor":{"source":"iana"},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.opentimestamps.ots":{"source":"iana"},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana","extensions":["rar"]},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.resilient.logic":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.seis+json":{"source":"iana","compressible":true},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.sycle+xml":{"source":"iana","compressible":true},"application/vnd.syft+json":{"source":"iana","compressible":true},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veritone.aion+json":{"source":"iana","compressible":true},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.dpp":{"source":"iana"},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"source":"iana","compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true,"extensions":["wif"]},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-iwork-keynote-sffkey":{"extensions":["key"]},"application/x-iwork-numbers-sffnumbers":{"extensions":["numbers"]},"application/x-iwork-pages-sffpages":{"extensions":["pages"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xsl","xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana","extensions":["amr"]},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx","opus"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/scip":{"source":"iana"},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sofa":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/tsvcis":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana","extensions":["avci"]},"image/avcs":{"source":"iana","extensions":["avcs"]},"image/avif":{"source":"iana","compressible":false,"extensions":["avif"]},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/ktx2":{"source":"iana","extensions":["ktx2"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","compressible":true,"extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"compressible":true,"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.pco.b16":{"source":"iana","extensions":["b16"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/e57":{"source":"iana"},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/step":{"source":"iana"},"model/step+xml":{"source":"iana","compressible":true,"extensions":["stpx"]},"model/step+zip":{"source":"iana","compressible":false,"extensions":["stpz"]},"model/step-xml+zip":{"source":"iana","compressible":false,"extensions":["stpxz"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.pytha.pyox":{"source":"iana"},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.sap.vds":{"source":"iana","extensions":["vds"]},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/cql":{"source":"iana"},"text/cql-expression":{"source":"iana"},"text/cql-identifier":{"source":"iana"},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/fhirpath":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/gff3":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shaclc":{"source":"iana"},"text/shex":{"source":"iana","extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/spdx":{"source":"iana","extensions":["spdx"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.familysearch.gedcom":{"source":"iana","extensions":["ged"]},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hans":{"source":"iana"},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"compressible":true,"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/av1":{"source":"iana"},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/ffv1":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana","extensions":["m4s"]},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/jxsv":{"source":"iana"},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/scip":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/vp9":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},1873:(e,n,a)=>{e.exports={parallel:a(8798),serial:a(2081),serialOrdered:a(28)}},2018:e=>{"use strict";e.exports=require("tty")},2052:(e,n,a)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.APIKeyConfiguration=n.DNS=n.Sender=n.Webhook=n.Statistic=n.Template=n.Segmentation=n.SentCampaign=n.DraftCampaign=n.ContactProperties=n.BulkContactManagement=n.Message=n.SendEmailV3_1=n.Common=void 0;var i=a(2311);Object.defineProperty(n,"Common",{enumerable:!0,get:function(){return i.Common}});var t=a(8842);Object.defineProperty(n,"SendEmailV3_1",{enumerable:!0,get:function(){return t.SendEmailV3_1}});var o=a(1375);Object.defineProperty(n,"Message",{enumerable:!0,get:function(){return o.Message}});var s=a(696);Object.defineProperty(n,"BulkContactManagement",{enumerable:!0,get:function(){return s.BulkContactManagement}}),Object.defineProperty(n,"ContactProperties",{enumerable:!0,get:function(){return s.ContactProperties}});var r=a(64);Object.defineProperty(n,"DraftCampaign",{enumerable:!0,get:function(){return r.DraftCampaign}}),Object.defineProperty(n,"SentCampaign",{enumerable:!0,get:function(){return r.SentCampaign}});var c=a(7948);Object.defineProperty(n,"Segmentation",{enumerable:!0,get:function(){return c.Segmentation}});var p=a(7580);Object.defineProperty(n,"Template",{enumerable:!0,get:function(){return p.Template}});var l=a(1254);Object.defineProperty(n,"Statistic",{enumerable:!0,get:function(){return l.Statistic}});var u=a(4193);Object.defineProperty(n,"Webhook",{enumerable:!0,get:function(){return u.Webhook}});var d=a(382);Object.defineProperty(n,"Sender",{enumerable:!0,get:function(){return d.Sender}}),Object.defineProperty(n,"DNS",{enumerable:!0,get:function(){return d.DNS}});var m=a(7380);Object.defineProperty(n,"APIKeyConfiguration",{enumerable:!0,get:function(){return m.APIKeyConfiguration}})},2081:(e,n,a)=>{var i=a(28);e.exports=function(e,n,a){return i(e,n,null,a)}},2203:e=>{"use strict";e.exports=require("stream")},2311:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Common=void 0,function(e){!function(e){e.Day="Day",e.Week="Week",e.Month="Month",e.Year="Year"}(e.Period||(e.Period={}))}(n.Common||(n.Common={}))},2313:(e,n,a)=>{var i=a(405);e.exports=function(e){var n=!1;return i((function(){n=!0})),function(a,t){n?e(a,t):i((function(){e(a,t)}))}}},2613:e=>{"use strict";e.exports=require("assert")},3030:(e,n)=>{"use strict";function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return"object"===a(e)&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}},3093:(e,n,a)=>{"use strict";var i=a(4459);e.exports=function(e){return i(e)||0===e?e:e<0?-1:1}},3106:e=>{"use strict";e.exports=require("zlib")},3126:(e,n,a)=>{"use strict";var i=a(6743),t=a(9675),o=a(76),s=a(3144);e.exports=function(e){if(e.length<1||"function"!=typeof e[0])throw new t("a function is required");return s(i,o,e)}},3144:(e,n,a)=>{"use strict";var i=a(6743),t=a(1002),o=a(76),s=a(7119);e.exports=s||i.call(o,t)},3164:(e,n,a)=>{var i=a(7016),t=i.URL,o=a(8611),s=a(5692),r=a(2203).Writable,c=a(2613),p=a(7507),l=!1;try{c(new t)}catch(e){l="ERR_INVALID_URL"===e.code}var u=["auth","host","hostname","href","path","pathname","port","protocol","query","search","hash"],d=["abort","aborted","connect","error","socket","timeout"],m=Object.create(null);d.forEach((function(e){m[e]=function(n,a,i){this._redirectable.emit(e,n,a,i)}}));var f=O("ERR_INVALID_URL","Invalid URL",TypeError),x=O("ERR_FR_REDIRECTION_FAILURE","Redirected request failed"),v=O("ERR_FR_TOO_MANY_REDIRECTS","Maximum number of redirects exceeded",x),h=O("ERR_FR_MAX_BODY_LENGTH_EXCEEDED","Request body larger than maxBodyLength limit"),b=O("ERR_STREAM_WRITE_AFTER_END","write after end"),g=r.prototype.destroy||k;function y(e,n){r.call(this),this._sanitizeOptions(e),this._options=e,this._ended=!1,this._ending=!1,this._redirectCount=0,this._redirects=[],this._requestBodyLength=0,this._requestBodyBuffers=[],n&&this.on("response",n);var a=this;this._onNativeResponse=function(e){try{a._processResponse(e)}catch(e){a.emit("error",e instanceof x?e:new x({cause:e}))}},this._performRequest()}function w(e){var n={maxRedirects:21,maxBodyLength:10485760},a={};return Object.keys(e).forEach((function(i){var o=i+":",s=a[o]=e[i],r=n[i]=Object.create(s);Object.defineProperties(r,{request:{value:function(e,i,s){var r;return r=e,t&&r instanceof t?e=_(e):C(e)?e=_(j(e)):(s=i,i=S(e),e={protocol:o}),R(i)&&(s=i,i=null),(i=Object.assign({maxRedirects:n.maxRedirects,maxBodyLength:n.maxBodyLength},e,i)).nativeProtocols=a,C(i.host)||C(i.hostname)||(i.hostname="::1"),c.equal(i.protocol,o,"protocol mismatch"),p("options",i),new y(i,s)},configurable:!0,enumerable:!0,writable:!0},get:{value:function(e,n,a){var i=r.request(e,n,a);return i.end(),i},configurable:!0,enumerable:!0,writable:!0}})})),n}function k(){}function j(e){var n;if(l)n=new t(e);else if(!C((n=S(i.parse(e))).protocol))throw new f({input:e});return n}function S(e){if(/^\[/.test(e.hostname)&&!/^\[[:0-9a-f]+\]$/i.test(e.hostname))throw new f({input:e.href||e});if(/^\[/.test(e.host)&&!/^\[[:0-9a-f]+\](:\d+)?$/i.test(e.host))throw new f({input:e.href||e});return e}function _(e,n){var a=n||{};for(var i of u)a[i]=e[i];return a.hostname.startsWith("[")&&(a.hostname=a.hostname.slice(1,-1)),""!==a.port&&(a.port=Number(a.port)),a.path=a.search?a.pathname+a.search:a.pathname,a}function E(e,n){var a;for(var i in n)e.test(i)&&(a=n[i],delete n[i]);return null==a?void 0:String(a).trim()}function O(e,n,a){function i(a){Error.captureStackTrace(this,this.constructor),Object.assign(this,a||{}),this.code=e,this.message=this.cause?n+": "+this.cause.message:n}return i.prototype=new(a||Error),Object.defineProperties(i.prototype,{constructor:{value:i,enumerable:!1},name:{value:"Error ["+e+"]",enumerable:!1}}),i}function A(e,n){for(var a of d)e.removeListener(a,m[a]);e.on("error",k),e.destroy(n)}function C(e){return"string"==typeof e||e instanceof String}function R(e){return"function"==typeof e}y.prototype=Object.create(r.prototype),y.prototype.abort=function(){A(this._currentRequest),this._currentRequest.abort(),this.emit("abort")},y.prototype.destroy=function(e){return A(this._currentRequest,e),g.call(this,e),this},y.prototype.write=function(e,n,a){if(this._ending)throw new b;if(!(C(e)||"object"==typeof(i=e)&&"length"in i))throw new TypeError("data should be a string, Buffer or Uint8Array");var i;R(n)&&(a=n,n=null),0!==e.length?this._requestBodyLength+e.length<=this._options.maxBodyLength?(this._requestBodyLength+=e.length,this._requestBodyBuffers.push({data:e,encoding:n}),this._currentRequest.write(e,n,a)):(this.emit("error",new h),this.abort()):a&&a()},y.prototype.end=function(e,n,a){if(R(e)?(a=e,e=n=null):R(n)&&(a=n,n=null),e){var i=this,t=this._currentRequest;this.write(e,n,(function(){i._ended=!0,t.end(null,null,a)})),this._ending=!0}else this._ended=this._ending=!0,this._currentRequest.end(null,null,a)},y.prototype.setHeader=function(e,n){this._options.headers[e]=n,this._currentRequest.setHeader(e,n)},y.prototype.removeHeader=function(e){delete this._options.headers[e],this._currentRequest.removeHeader(e)},y.prototype.setTimeout=function(e,n){var a=this;function i(n){n.setTimeout(e),n.removeListener("timeout",n.destroy),n.addListener("timeout",n.destroy)}function t(n){a._timeout&&clearTimeout(a._timeout),a._timeout=setTimeout((function(){a.emit("timeout"),o()}),e),i(n)}function o(){a._timeout&&(clearTimeout(a._timeout),a._timeout=null),a.removeListener("abort",o),a.removeListener("error",o),a.removeListener("response",o),a.removeListener("close",o),n&&a.removeListener("timeout",n),a.socket||a._currentRequest.removeListener("socket",t)}return n&&this.on("timeout",n),this.socket?t(this.socket):this._currentRequest.once("socket",t),this.on("socket",i),this.on("abort",o),this.on("error",o),this.on("response",o),this.on("close",o),this},["flushHeaders","getHeader","setNoDelay","setSocketKeepAlive"].forEach((function(e){y.prototype[e]=function(n,a){return this._currentRequest[e](n,a)}})),["aborted","connection","socket"].forEach((function(e){Object.defineProperty(y.prototype,e,{get:function(){return this._currentRequest[e]}})})),y.prototype._sanitizeOptions=function(e){if(e.headers||(e.headers={}),e.host&&(e.hostname||(e.hostname=e.host),delete e.host),!e.pathname&&e.path){var n=e.path.indexOf("?");n<0?e.pathname=e.path:(e.pathname=e.path.substring(0,n),e.search=e.path.substring(n))}},y.prototype._performRequest=function(){var e=this._options.protocol,n=this._options.nativeProtocols[e];if(!n)throw new TypeError("Unsupported protocol "+e);if(this._options.agents){var a=e.slice(0,-1);this._options.agent=this._options.agents[a]}var t=this._currentRequest=n.request(this._options,this._onNativeResponse);for(var o of(t._redirectable=this,d))t.on(o,m[o]);if(this._currentUrl=/^\//.test(this._options.path)?i.format(this._options):this._options.path,this._isRedirect){var s=0,r=this,c=this._requestBodyBuffers;!function e(n){if(t===r._currentRequest)if(n)r.emit("error",n);else if(s<c.length){var a=c[s++];t.finished||t.write(a.data,a.encoding,e)}else r._ended&&t.end()}()}},y.prototype._processResponse=function(e){var n=e.statusCode;this._options.trackRedirects&&this._redirects.push({url:this._currentUrl,headers:e.headers,statusCode:n});var a,o=e.headers.location;if(!o||!1===this._options.followRedirects||n<300||n>=400)return e.responseUrl=this._currentUrl,e.redirects=this._redirects,this.emit("response",e),void(this._requestBodyBuffers=[]);if(A(this._currentRequest),e.destroy(),++this._redirectCount>this._options.maxRedirects)throw new v;var s=this._options.beforeRedirect;s&&(a=Object.assign({Host:e.req.getHeader("host")},this._options.headers));var r=this._options.method;((301===n||302===n)&&"POST"===this._options.method||303===n&&!/^(?:GET|HEAD)$/.test(this._options.method))&&(this._options.method="GET",this._requestBodyBuffers=[],E(/^content-/i,this._options.headers));var u,d,m=E(/^host$/i,this._options.headers),f=j(this._currentUrl),x=m||f.host,h=/^\w+:/.test(o)?this._currentUrl:i.format(Object.assign(f,{host:x})),b=(u=o,d=h,l?new t(u,d):j(i.resolve(d,u)));if(p("redirecting to",b.href),this._isRedirect=!0,_(b,this._options),(b.protocol!==f.protocol&&"https:"!==b.protocol||b.host!==x&&!function(e,n){c(C(e)&&C(n));var a=e.length-n.length-1;return a>0&&"."===e[a]&&e.endsWith(n)}(b.host,x))&&E(/^(?:(?:proxy-)?authorization|cookie)$/i,this._options.headers),R(s)){var g={headers:e.headers,statusCode:n},y={url:h,method:r,headers:a};s(this._options,g,y),this._sanitizeOptions(this._options)}this._performRequest()},e.exports=w({http:o,https:s}),e.exports.wrap=w},3235:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return void 0===e}},3251:function(e,n,a){"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var t=this&&this.__assign||function(){return t=Object.assign||function(e){for(var n,a=1,i=arguments.length;a<i;a++)for(var t in n=arguments[a])Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e},t.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,n,a,i){void 0===i&&(i=a);var t=Object.getOwnPropertyDescriptor(n,a);t&&!("get"in t?!n.__esModule:t.writable||t.configurable)||(t={enumerable:!0,get:function(){return n[a]}}),Object.defineProperty(e,i,t)}:function(e,n,a,i){void 0===i&&(i=a),e[i]=n[a]}),s=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&o(n,e,a);return s(n,e),n},c=this&&this.__awaiter||function(e,n,a,i){return new(a||(a=Promise))((function(t,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function r(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof a?n:new a((function(e){e(n)}))).then(s,r)}c((i=i.apply(e,n||[])).next())}))},p=this&&this.__generator||function(e,n){var a,i,t,o,s={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return o={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function r(o){return function(r){return function(o){if(a)throw new TypeError("Generator is already executing.");for(;s;)try{if(a=1,i&&(t=2&o[0]?i.return:o[0]?i.throw||((t=i.return)&&t.call(i),0):i.next)&&!(t=t.call(i,o[1])).done)return t;switch(i=0,t&&(o=[2&o[0],t.value]),o[0]){case 0:case 1:t=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((t=(t=s.trys).length>0&&t[t.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!t||o[1]>t[0]&&o[1]<t[3])){s.label=o[1];break}if(6===o[0]&&s.label<t[1]){s.label=t[1],t=o;break}if(t&&s.label<t[2]){s.label=t[2],s.ops.push(o);break}t[2]&&s.ops.pop(),s.trys.pop();continue}o=n.call(e,s)}catch(e){o=[6,e],i=0}finally{a=t=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,r])}}},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var u=l(a(5469)),d=l(a(1013)),m=r(a(9329)),f=a(9191),x=l(a(5025)),v=l(a(4865)),h=(0,d.default)({storeAsString:!0}),b=function(){function e(e,n,a,i){if(!(e instanceof v.default))throw new Error('Argument "client" must be instance of Client');if(!Object.values(x.default).includes(n))throw new Error('Argument "method" must be one of supported methods: get, post, put, delete');if("string"!=typeof a)throw new Error('Argument "resource" must be string');this.client=e,this.method=n,this.url=a.toLowerCase(),this.resource=a.toLowerCase(),this.subPath=this.buildSubPath(),this.actionPath=null,this.config=t({},i)}return e.prototype.getUserAgent=function(){return"mailjet-api-v3-nodejs/".concat(this.client.getPackageVersion())},e.prototype.getCredentials=function(){return{apiToken:this.client.getAPIToken(),apiKey:this.client.getAPIKey(),apiSecret:this.client.getAPISecret()}},e.prototype.getContentType=function(e){if("string"!=typeof e)throw new Error('Argument "url" must be string');return e.indexOf("text:plain")>-1?"text/plain":"application/json"},e.prototype.getRequestBody=function(e){return[x.default.Put,x.default.Post,x.default.Delete].includes(this.method)?e:void 0},e.prototype.buildFullUrl=function(){var n,a,i=this.client.getConfig(),t=null!==(n=this.config.host)&&void 0!==n?n:i.host,o=null!==(a=this.config.version)&&void 0!==a?a:i.version;return(0,u.default)(e.protocol,t,o,this.subPath,this.url)},e.prototype.buildSubPath=function(){if(this.actionPath){var e="contactslist"===this.resource&&"csvdata/text:plain"===this.actionPath,n="batchjob"===this.resource&&"csverror/text:csv"===this.actionPath;return e||n?"DATA":this.subPath}var a="send"===this.resource,i=this.resource.indexOf("sms")>-1;return a||i?"":"REST"},e.prototype.makeRequest=function(n,a,i){var o,s={url:n,params:i,data:this.getRequestBody(a),method:this.method,responseType:"json",headers:{"User-Agent":this.getUserAgent(),"Content-Type":this.getContentType(n)},transformResponse:function(n){var a="string"==typeof n,i="json"===this.responseType;return n&&a&&i?e.parseToJSONb(n):n}};e.isBrowser()&&(s.headers["X-User-Agent"]=s.headers["User-Agent"]);var r=this.getCredentials();r.apiToken?s.headers.Authorization="Bearer ".concat(r.apiToken):s.auth={username:r.apiKey,password:r.apiSecret};var c=this.client.getConfig(),p=this.client.getOptions();p.timeout&&(s.timeout=p.timeout),p.proxy&&(s.proxy=p.proxy),p.headers&&Object.keys(p.headers).length>0&&(s.headers=t(t({},s.headers),p.headers));var l=null!==(o=this.config.output)&&void 0!==o?o:c.output;return l&&(s.responseType=l),p.maxBodyLength&&(s.maxBodyLength=p.maxBodyLength),p.maxContentLength&&(s.maxContentLength=p.maxContentLength),(0,m.default)(s)},e.prototype.setBaseURL=function(e){return this.url=e.toLowerCase(),this},e.prototype.id=function(e){if(!["string","number"].includes(i(e)))throw new Error('Argument "value" must be string or number');return this.url=(0,u.default)(this.url,e.toString()),this},e.prototype.action=function(e){if("string"!=typeof e)throw new Error("action method should be called with argument of type string");switch(this.actionPath=e.toLowerCase(),this.actionPath){case"csvdata":this.actionPath="csvdata/text:plain";break;case"csverror":this.actionPath="csverror/text:csv"}return this.url=(0,u.default)(this.url,this.actionPath),this.subPath=this.buildSubPath(),this},e.prototype.request=function(e,n,a){var i,t,o,s,r;return void 0===e&&(e={}),void 0===n&&(n={}),void 0===a&&(a=!0),c(this,void 0,void 0,(function(){var c,l,u,d,x,v,h,b,g,y;return p(this,(function(p){switch(p.label){case 0:if(c=this.buildFullUrl(),this.setBaseURL(this.resource),this.actionPath&&this.validateActionData(this.actionPath,e),!a)return[2,{body:b=this.getRequestBody(e),params:n,url:c}];p.label=1;case 1:return p.trys.push([1,3,,4]),[4,this.makeRequest(c,e,n)];case 2:return[2,{response:l=p.sent(),body:l.data}];case 3:if((u=p.sent())instanceof m.AxiosError)throw(d=new Error).code=u.code,d.config=u.config,u.response?(x=u.response,v=x.status,h=x.statusText,b=x.data,d.response=u.response,d.statusCode=v,d.statusText=h,g=null!==(i=null==b?void 0:b.ErrorMessage)&&void 0!==i?i:u.message,d.originalMessage=g,d.message='Unsuccessful: Status Code: "'.concat(d.statusCode,'" Message: "').concat(g,'"'),b&&("string"==typeof(y=null===(r=null===(s=null===(o=null===(t=b.Messages)||void 0===t?void 0:t[0])||void 0===o?void 0:o.Errors)||void 0===s?void 0:s[0])||void 0===r?void 0:r.ErrorMessage)&&(d.message+=";\n".concat(y)),(0,f.setValueIfNotNil)(d,"ErrorMessage",b.ErrorMessage),(0,f.setValueIfNotNil)(d,"ErrorCode",b.ErrorCode),(0,f.setValueIfNotNil)(d,"ErrorIdentifier",b.ErrorIdentifier),(0,f.setValueIfNotNil)(d,"ErrorRelatedTo",b.ErrorRelatedTo))):(d.response=null,d.statusCode=null,d.statusText=null,d.originalMessage=u.message,d.message='Unsuccessful: Error Code: "'.concat(d.code,'" Message: "').concat(u.message,'"')),d;throw u;case 4:return[2]}}))}))},e.parseToJSONb=function(e){if("string"!=typeof e)throw new Error('Argument "text" must be string');var n;try{n=h.parse(e)}catch(e){n={}}return n},e.isBrowser=function(){return"object"===("undefined"==typeof window?"undefined":i(window))},e.prototype.validateActionData=function(e,n){var a={managecontact:function(e){if("object"===i(e)){if(!(0,f.isNonEmptyObject)(e))throw new Error('"managecontact" action expects request body to be not empty object');if(!(0,f.isValidJson)(e))throw new Error('"managecontact" action expects request body to be valid JSON object');if("Properties"in e){if("string"==typeof e.Properties)throw new Error('"managecontact" action expects Properties value to be an object');if("object"===i(e.Properties)&&!(0,f.isNull)(e.Properties)&&!(0,f.isValidJson)(e.Properties))throw new Error('"managecontact" action expects Properties value to be valid JSON object')}}}};e in a&&a[e](n)},e.protocol="https://",e}();n.default=b},3628:(e,n,a)=>{"use strict";var i=a(8648),t=a(1064),o=a(7176);e.exports=i?function(e){return i(e)}:t?function(e){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("getProto: not an object");return t(e)}:o?function(e){return o(e)}:null},3750:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return null===e}},4039:(e,n,a)=>{"use strict";var i="undefined"!=typeof Symbol&&Symbol,t=a(1333);e.exports=function(){return"function"==typeof i&&"function"==typeof Symbol&&"symbol"==typeof i("foo")&&"symbol"==typeof Symbol("bar")&&t()}},4193:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Webhook=void 0,function(e){!function(e){e.Open="open",e.Click="click",e.Bounce="bounce",e.Spam="spam",e.Blocked="blocked",e.UnSub="unsub",e.Sent="sent"}(e.EventType||(e.EventType={})),function(e){e[e.Click=1]="Click",e[e.Bounce=2]="Bounce",e[e.Spam=3]="Spam",e[e.Blocked=4]="Blocked",e[e.Unsubscribe=5]="Unsubscribe",e[e.Open=6]="Open",e[e.Sent=7]="Sent"}(e.EventTypeValue||(e.EventTypeValue={})),function(e){e.Dead="dead",e.Alive="alive"}(e.Status||(e.Status={}))}(n.Webhook||(n.Webhook={}))},4434:e=>{"use strict";e.exports=require("events")},4459:e=>{"use strict";e.exports=Number.isNaN||function(e){return e!=e}},4555:e=>{function n(e){"function"==typeof this.jobs[e]&&this.jobs[e]()}e.exports=function(e){Object.keys(e.jobs).forEach(n.bind(e)),e.jobs={}}},4865:function(e,n,a){"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}var t=this&&this.__assign||function(){return t=Object.assign||function(e){for(var n,a=1,i=arguments.length;a<i;a++)for(var t in n=arguments[a])Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e},t.apply(this,arguments)},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var s=a(9191),r=o(a(5025)),c=o(a(3251)),p=o(a(8330)),l=function(){function e(e){if(!(0,s.isPureObject)(e))throw new Error('Argument "params" must be object');this.init(this.cloneParams(e))}return e.prototype.getPackageVersion=function(){return this.version},e.prototype.getAPIKey=function(){return this.apiKey},e.prototype.getAPISecret=function(){return this.apiSecret},e.prototype.getAPIToken=function(){return this.apiToken},e.prototype.getConfig=function(){return t({},this.config)},e.prototype.getOptions=function(){return t({},this.options)},e.prototype.get=function(e,n){return new c.default(this,r.default.Get,e,n)},e.prototype.post=function(e,n){return new c.default(this,r.default.Post,e,n)},e.prototype.put=function(e,n){return new c.default(this,r.default.Put,e,n)},e.prototype.delete=function(e,n){return new c.default(this,r.default.Delete,e,n)},e.prototype.init=function(n){if(!(0,s.isPureObject)(n))throw new Error('Argument "params" must be object');var a=n.apiToken,i=n.apiKey,t=n.apiSecret,o=n.options,r=n.config;return this.version=e.packageJSON.version,this.setConfig(null!=r?r:null),this.setOptions(null!=o?o:null),"apiToken"in n?this.tokenConnectStrategy(a):this.basicConnectStrategy(i,t)},e.prototype.cloneParams=function(e){if(!(0,s.isPureObject)(e))throw new Error('Argument "params" must be object');var n=t({},e);return e.config&&(n.config=t({},e.config)),e.options&&(n.options=t({},e.options),n.options.proxy&&(n.options.proxy=t({},n.options.proxy)),n.options.headers&&(n.options.headers=t({},n.options.headers))),n},e.prototype.setConfig=function(n){if("object"!==i(n))throw new Error('Argument "customConfig" must be object or null');var a=t({},e.config);return null!==n&&((0,s.setValueIfNotNil)(a,"host",n.host),(0,s.setValueIfNotNil)(a,"output",n.output),(0,s.setValueIfNotNil)(a,"version",n.version)),this.config=a,this},e.prototype.setOptions=function(e){if("object"!==i(e))throw new Error('Argument "options" must be object or null');return this.options=null!=e?e:{},this},e.prototype.tokenConnectStrategy=function(e){if(!e)throw new Error("Mailjet API_TOKEN is required");return this.apiToken=e,this},e.prototype.basicConnectStrategy=function(e,n){if(!e)throw new Error("Mailjet API_KEY is required");if(!n)throw new Error("Mailjet API_SECRET is required");return this.apiKey=e,this.apiSecret=n,this},e.apiConnect=function(n,a,i){return new e(t({apiKey:n,apiSecret:a},i))},e.smsConnect=function(n,a){return new e(t({apiToken:n},a))},e.config=Object.freeze({host:"api.mailjet.com",version:"v3",output:"json"}),e.packageJSON=Object.freeze(t({},p.default)),e}();n.default=l},5025:(e,n)=>{"use strict";var a;Object.defineProperty(n,"__esModule",{value:!0}),function(e){e.Get="get",e.Post="post",e.Put="put",e.Delete="delete"}(a||(a={})),n.default=a},5345:e=>{"use strict";e.exports=URIError},5469:function(e,n,a){var i,t,o;o=function(){return function(){return function(e){var n=[];if(0===e.length)return"";if("string"!=typeof e[0])throw new TypeError("Url must be a string. Received "+e[0]);if(e[0].match(/^[^/:]+:\/*$/)&&e.length>1){var a=e.shift();e[0]=a+e[0]}e[0].match(/^file:\/\/\//)?e[0]=e[0].replace(/^([^/:]+):\/*/,"$1:///"):e[0]=e[0].replace(/^([^/:]+):\/*/,"$1://");for(var i=0;i<e.length;i++){var t=e[i];if("string"!=typeof t)throw new TypeError("Url must be a string. Received "+t);""!==t&&(i>0&&(t=t.replace(/^[\/]+/,"")),t=i<e.length-1?t.replace(/[\/]+$/,""):t.replace(/[\/]+$/,"/"),n.push(t))}var o=n.join("/"),s=(o=o.replace(/\/(\?|&|#[^!])/g,"$1")).split("?");return s.shift()+(s.length>0?"?":"")+s.join("&")}("object"==typeof arguments[0]?arguments[0]:[].slice.call(arguments))}},e.exports?e.exports=o():void 0===(t="function"==typeof(i=o)?i.call(n,a,n,e):i)||(e.exports=t)},5692:e=>{"use strict";e.exports=require("https")},5753:(e,n,a)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?e.exports=a(7833):e.exports=a(6033)},5795:(e,n,a)=>{"use strict";var i=a(6549);if(i)try{i([],"length")}catch(e){i=null}e.exports=i},5880:e=>{"use strict";e.exports=Math.pow},5884:e=>{"use strict";e.exports=(e,n)=>{n=n||process.argv;const a=e.startsWith("-")?"":1===e.length?"-":"--",i=n.indexOf(a+e),t=n.indexOf("--");return-1!==i&&(-1===t||i<t)}},6033:(e,n,a)=>{const i=a(2018),t=a(9023);n.init=function(e){e.inspectOpts={};const a=Object.keys(n.inspectOpts);for(let i=0;i<a.length;i++)e.inspectOpts[a[i]]=n.inspectOpts[a[i]]},n.log=function(...e){return process.stderr.write(t.formatWithOptions(n.inspectOpts,...e)+"\n")},n.formatArgs=function(a){const{namespace:i,useColors:t}=this;if(t){const n=this.color,t="[3"+(n<8?n:"8;5;"+n),o=`  ${t};1m${i} [0m`;a[0]=o+a[0].split("\n").join("\n"+o),a.push(t+"m+"+e.exports.humanize(this.diff)+"[0m")}else a[0]=(n.inspectOpts.hideDate?"":(new Date).toISOString()+" ")+i+" "+a[0]},n.save=function(e){e?process.env.DEBUG=e:delete process.env.DEBUG},n.load=function(){return process.env.DEBUG},n.useColors=function(){return"colors"in n.inspectOpts?Boolean(n.inspectOpts.colors):i.isatty(process.stderr.fd)},n.destroy=t.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),n.colors=[6,2,3,4,5,1];try{const e=a(7687);e&&(e.stderr||e).level>=2&&(n.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(e){}n.inspectOpts=Object.keys(process.env).filter((e=>/^debug_/i.test(e))).reduce(((e,n)=>{const a=n.substring(6).toLowerCase().replace(/_([a-z])/g,((e,n)=>n.toUpperCase()));let i=process.env[n];return i=!!/^(yes|on|true|enabled)$/i.test(i)||!/^(no|off|false|disabled)$/i.test(i)&&("null"===i?null:Number(i)),e[a]=i,e}),{}),e.exports=a(736)(n);const{formatters:o}=e.exports;o.o=function(e){return this.inspectOpts.colors=this.useColors,t.inspect(e,this.inspectOpts).split("\n").map((e=>e.trim())).join(" ")},o.O=function(e){return this.inspectOpts.colors=this.useColors,t.inspect(e,this.inspectOpts)}},6049:(e,n,a)=>{"use strict";var i,t,o,s=a(7598),r=a(6928).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,p=/^text\//i;function l(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),a=n&&s[n[1].toLowerCase()];return a&&a.charset?a.charset:!(!n||!p.test(n[1]))&&"UTF-8"}n.charset=l,n.charsets={lookup:l},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var a=-1===e.indexOf("/")?n.lookup(e):e;if(!a)return!1;if(-1===a.indexOf("charset")){var i=n.charset(a);i&&(a+="; charset="+i.toLowerCase())}return a},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var a=c.exec(e),i=a&&n.extensions[a[1].toLowerCase()];return!(!i||!i.length)&&i[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var a=r("x."+e).toLowerCase().substr(1);return a&&n.types[a]||!1},n.types=Object.create(null),i=n.extensions,t=n.types,o=["nginx","apache",void 0,"iana"],Object.keys(s).forEach((function(e){var n=s[e],a=n.extensions;if(a&&a.length){i[e]=a;for(var r=0;r<a.length;r++){var c=a[r];if(t[c]){var p=o.indexOf(s[t[c]].source),l=o.indexOf(n.source);if("application/octet-stream"!==t[c]&&(p>l||p===l&&"application/"===t[c].substr(0,12)))continue}t[c]=e}}}))},6081:function(e,n,a){"use strict";var i,t=this&&this.__extends||(i=function(e,n){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])},i(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function a(){this.constructor=e}i(e,n),e.prototype=null===n?Object.create(n):(a.prototype=n.prototype,new a)}),o=this&&this.__createBinding||(Object.create?function(e,n,a,i){void 0===i&&(i=a);var t=Object.getOwnPropertyDescriptor(n,a);t&&!("get"in t?!n.__esModule:t.writable||t.configurable)||(t={enumerable:!0,get:function(){return n[a]}}),Object.defineProperty(e,i,t)}:function(e,n,a,i){void 0===i&&(i=a),e[i]=n[a]}),s=this&&this.__exportStar||function(e,n){for(var a in e)"default"===a||Object.prototype.hasOwnProperty.call(n,a)||o(n,e,a)},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.HttpMethods=n.Request=n.Client=void 0;var c=r(a(5025));n.HttpMethods=c.default;var p=r(a(3251));n.Request=p.default;var l=r(a(4865));n.Client=l.default;var u=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return t(n,e),n.Request=p.default,n.HttpMethods=c.default,n.Client=l.default,n}(l.default);s(a(2052),n),n.default=u},6188:e=>{"use strict";e.exports=Math.max},6276:(e,n,a)=>{var i=a(4555),t=a(2313);e.exports=function(e){Object.keys(this.jobs).length&&(this.index=this.size,i(this),t(e)(null,this.results))}},6504:(e,n,a)=>{"use strict";var i=a(7016).parse,t={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},o=String.prototype.endsWith||function(e){return e.length<=this.length&&-1!==this.indexOf(e,this.length-e.length)};function s(e){return process.env[e.toLowerCase()]||process.env[e.toUpperCase()]||""}n.getProxyForUrl=function(e){var n="string"==typeof e?i(e):e||{},a=n.protocol,r=n.host,c=n.port;if("string"!=typeof r||!r||"string"!=typeof a)return"";if(a=a.split(":",1)[0],!function(e,n){var a=(s("npm_config_no_proxy")||s("no_proxy")).toLowerCase();return!a||"*"!==a&&a.split(/[,\s]/).every((function(a){if(!a)return!0;var i=a.match(/^(.+):(\d+)$/),t=i?i[1]:a,s=i?parseInt(i[2]):0;return!(!s||s===n)||(/^[.*]/.test(t)?("*"===t.charAt(0)&&(t=t.slice(1)),!o.call(e,t)):e!==t)}))}(r=r.replace(/:\d*$/,""),c=parseInt(c)||t[a]||0))return"";var p=s("npm_config_"+a+"_proxy")||s(a+"_proxy")||s("npm_config_proxy")||s("all_proxy");return p&&-1===p.indexOf("://")&&(p=a+"://"+p),p}},6549:e=>{"use strict";e.exports=Object.getOwnPropertyDescriptor},6585:e=>{var n=1e3,a=60*n,i=60*a,t=24*i,o=7*t,s=365.25*t;function r(e,n,a,i){var t=n>=1.5*a;return Math.round(e/a)+" "+i+(t?"s":"")}e.exports=function(e,c){c=c||{};var p,l,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var r=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(r){var c=parseFloat(r[1]);switch((r[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*s;case"weeks":case"week":case"w":return c*o;case"days":case"day":case"d":return c*t;case"hours":case"hour":case"hrs":case"hr":case"h":return c*i;case"minutes":case"minute":case"mins":case"min":case"m":return c*a;case"seconds":case"second":case"secs":case"sec":case"s":return c*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}}}(e);if("number"===u&&isFinite(e))return c.long?(p=e,(l=Math.abs(p))>=t?r(p,l,t,"day"):l>=i?r(p,l,i,"hour"):l>=a?r(p,l,a,"minute"):l>=n?r(p,l,n,"second"):p+" ms"):function(e){var o=Math.abs(e);return o>=t?Math.round(e/t)+"d":o>=i?Math.round(e/i)+"h":o>=a?Math.round(e/a)+"m":o>=n?Math.round(e/n)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},6743:(e,n,a)=>{"use strict";var i=a(9353);e.exports=Function.prototype.bind||i},6928:e=>{"use strict";e.exports=require("path")},6982:e=>{"use strict";e.exports=require("crypto")},7016:e=>{"use strict";e.exports=require("url")},7088:(e,n)=>{"use strict";function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return"object"===a(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype&&Object.keys(e).length>0}},7119:e=>{"use strict";e.exports="undefined"!=typeof Reflect&&Reflect&&Reflect.apply},7176:(e,n,a)=>{"use strict";var i,t=a(3126),o=a(5795);try{i=[].__proto__===Array.prototype}catch(e){if(!e||"object"!=typeof e||!("code"in e)||"ERR_PROTO_ACCESS"!==e.code)throw e}var s=!!i&&o&&o(Object.prototype,"__proto__"),r=Object,c=r.getPrototypeOf;e.exports=s&&"function"==typeof s.get?t([s.get]):"function"==typeof c&&function(e){return c(null==e?e:r(e))}},7275:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){try{return JSON.stringify(e),!0}catch(e){return!1}}},7372:(e,n,a)=>{var i=a(1594),t=e.exports;!function(){"use strict";var e,n,a,o=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,s={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function r(e){return o.lastIndex=0,o.test(e)?'"'+e.replace(o,(function(e){var n=s[e];return"string"==typeof n?n:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+e+'"'}function c(t,o){var s,p,l,u,d,m=e,f=o[t],x=null!=f&&(f instanceof i||i.isBigNumber(f));switch(f&&"object"==typeof f&&"function"==typeof f.toJSON&&(f=f.toJSON(t)),"function"==typeof a&&(f=a.call(o,t,f)),typeof f){case"string":return x?f:r(f);case"number":return isFinite(f)?String(f):"null";case"boolean":case"null":case"bigint":return String(f);case"object":if(!f)return"null";if(e+=n,d=[],"[object Array]"===Object.prototype.toString.apply(f)){for(u=f.length,s=0;s<u;s+=1)d[s]=c(s,f)||"null";return l=0===d.length?"[]":e?"[\n"+e+d.join(",\n"+e)+"\n"+m+"]":"["+d.join(",")+"]",e=m,l}if(a&&"object"==typeof a)for(u=a.length,s=0;s<u;s+=1)"string"==typeof a[s]&&(l=c(p=a[s],f))&&d.push(r(p)+(e?": ":":")+l);else Object.keys(f).forEach((function(n){var a=c(n,f);a&&d.push(r(n)+(e?": ":":")+a)}));return l=0===d.length?"{}":e?"{\n"+e+d.join(",\n"+e)+"\n"+m+"}":"{"+d.join(",")+"}",e=m,l}}"function"!=typeof t.stringify&&(t.stringify=function(i,t,o){var s;if(e="",n="","number"==typeof o)for(s=0;s<o;s+=1)n+=" ";else"string"==typeof o&&(n=o);if(a=t,t&&"function"!=typeof t&&("object"!=typeof t||"number"!=typeof t.length))throw new Error("JSON.stringify");return c("",{"":i})})}()},7380:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.APIKeyConfiguration=void 0,function(e){!function(e){e.Normal="Normal",e.SoftLock="Softlock",e.HardLock="Hardlock"}(e.RunLevel||(e.RunLevel={}))}(n.APIKeyConfiguration||(n.APIKeyConfiguration={}))},7507:(e,n,a)=>{var i;e.exports=function(){if(!i){try{i=a(5753)("follow-redirects")}catch(e){}"function"!=typeof i&&(i=function(){})}i.apply(null,arguments)}},7580:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Template=void 0,function(e){!function(e){e.Full="full",e.Basic="basic",e.NewsLetter="newsletter",e.ECommerce="e-commerce",e.Events="events",e.Travel="travel",e.Sports="sports",e.Welcome="welcome",e.ContactPropertyUpdate="contact-property-update",e.Support="support",e.Invoice="invoice",e.Anniversary="anniversary",e.Account="account",e.Activation="activation"}(e.Categories||(e.Categories={})),function(e){e.ContainsAny="containsany",e.ContainsAll="containsall",e.IsSubSet="issubset"}(e.CategoriesSelectionMethod||(e.CategoriesSelectionMethod={})),function(e){e[e.DragAndDropBuilder=1]="DragAndDropBuilder",e[e.HTMLBuilder=2]="HTMLBuilder",e[e.SavedSectionBuilder=3]="SavedSectionBuilder",e[e.MJMLBuilder=4]="MJMLBuilder"}(e.EditMode||(e.EditMode={})),function(e){e.ApiKey="apikey",e.User="user",e.Global="global"}(e.OwnerType||(e.OwnerType={})),function(e){e.Marketing="marketing",e.Transactional="transactional",e.Automation="automation"}(e.Purposes||(e.Purposes={})),function(e){e.ContainsAny="containsany",e.ContainsAll="containsall",e.IsSubSet="issubset"}(e.PurposesSelectionMethod||(e.PurposesSelectionMethod={}))}(n.Template||(n.Template={}))},7598:(e,n,a)=>{e.exports=a(1813)},7687:(e,n,a)=>{"use strict";const i=a(857),t=a(5884),o=process.env;let s;function r(e){const n=function(e){if(!1===s)return 0;if(t("color=16m")||t("color=full")||t("color=truecolor"))return 3;if(t("color=256"))return 2;if(e&&!e.isTTY&&!0!==s)return 0;const n=s?1:0;if("win32"===process.platform){const e=i.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in o)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some((e=>e in o))||"codeship"===o.CI_NAME?1:n;if("TEAMCITY_VERSION"in o)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(o.TEAMCITY_VERSION)?1:0;if("truecolor"===o.COLORTERM)return 3;if("TERM_PROGRAM"in o){const e=parseInt((o.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(o.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(o.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)||"COLORTERM"in o?1:(o.TERM,n)}(e);return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(n)}t("no-color")||t("no-colors")||t("color=false")?s=!1:(t("color")||t("colors")||t("color=true")||t("color=always"))&&(s=!0),"FORCE_COLOR"in o&&(s=0===o.FORCE_COLOR.length||0!==parseInt(o.FORCE_COLOR,10)),e.exports={supportsColor:r,stdout:r(process.stdout),stderr:r(process.stderr)}},7833:(e,n,a)=>{n.formatArgs=function(n){if(n[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+n[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const a="color: "+this.color;n.splice(1,0,a,"color: inherit");let i=0,t=0;n[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(i++,"%c"===e&&(t=i))})),n.splice(t,0,a)},n.save=function(e){try{e?n.storage.setItem("debug",e):n.storage.removeItem("debug")}catch(e){}},n.load=function(){let e;try{e=n.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},n.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let e;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&(e=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(e[1],10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},n.storage=function(){try{return localStorage}catch(e){}}(),n.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),n.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],n.log=console.debug||console.log||(()=>{}),e.exports=a(736)(n);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},7948:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Segmentation=void 0,function(e){!function(e){e.Used="used",e.UnUsed="unused",e.Deleted="deleted"}(e.SegmentStatus||(e.SegmentStatus={}))}(n.Segmentation||(n.Segmentation={}))},8002:e=>{"use strict";e.exports=Math.min},8051:(e,n,a)=>{var i=a(2313),t=a(4555);e.exports=function(e,n,a,o){var s=a.keyedList?a.keyedList[a.index]:a.index;a.jobs[s]=function(e,n,a,t){return 2==e.length?e(a,i(t)):e(a,n,i(t))}(n,s,e[s],(function(e,n){s in a.jobs&&(delete a.jobs[s],e?t(a):a.results[s]=n,o(e,a.results))}))}},8068:e=>{"use strict";e.exports=SyntaxError},8069:(e,n,a)=>{var i=a(2203).Stream,t=a(9023);function o(){this.source=null,this.dataSize=0,this.maxDataSize=1048576,this.pauseStream=!0,this._maxDataSizeExceeded=!1,this._released=!1,this._bufferedEvents=[]}e.exports=o,t.inherits(o,i),o.create=function(e,n){var a=new this;for(var i in n=n||{})a[i]=n[i];a.source=e;var t=e.emit;return e.emit=function(){return a._handleEmit(arguments),t.apply(e,arguments)},e.on("error",(function(){})),a.pauseStream&&e.pause(),a},Object.defineProperty(o.prototype,"readable",{configurable:!0,enumerable:!0,get:function(){return this.source.readable}}),o.prototype.setEncoding=function(){return this.source.setEncoding.apply(this.source,arguments)},o.prototype.resume=function(){this._released||this.release(),this.source.resume()},o.prototype.pause=function(){this.source.pause()},o.prototype.release=function(){this._released=!0,this._bufferedEvents.forEach(function(e){this.emit.apply(this,e)}.bind(this)),this._bufferedEvents=[]},o.prototype.pipe=function(){var e=i.prototype.pipe.apply(this,arguments);return this.resume(),e},o.prototype._handleEmit=function(e){this._released?this.emit.apply(this,e):("data"===e[0]&&(this.dataSize+=e[1].length,this._checkIfMaxDataSizeExceeded()),this._bufferedEvents.push(e))},o.prototype._checkIfMaxDataSizeExceeded=function(){if(!(this._maxDataSizeExceeded||this.dataSize<=this.maxDataSize)){this._maxDataSizeExceeded=!0;var e="DelayedStream#maxDataSize of "+this.maxDataSize+" bytes exceeded.";this.emit("error",new Error(e))}}},8146:(e,n,a)=>{var i=null;const t=/(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/,o=/(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;e.exports=function(e){"use strict";var n={strict:!1,storeAsString:!1,alwaysParseAsBig:!1,useNativeBigInt:!1,protoAction:"error",constructorAction:"error"};if(null!=e){if(!0===e.strict&&(n.strict=!0),!0===e.storeAsString&&(n.storeAsString=!0),n.alwaysParseAsBig=!0===e.alwaysParseAsBig&&e.alwaysParseAsBig,n.useNativeBigInt=!0===e.useNativeBigInt&&e.useNativeBigInt,void 0!==e.constructorAction){if("error"!==e.constructorAction&&"ignore"!==e.constructorAction&&"preserve"!==e.constructorAction)throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${e.constructorAction}`);n.constructorAction=e.constructorAction}if(void 0!==e.protoAction){if("error"!==e.protoAction&&"ignore"!==e.protoAction&&"preserve"!==e.protoAction)throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${e.protoAction}`);n.protoAction=e.protoAction}}var s,r,c,p,l={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},u=function(e){throw{name:"SyntaxError",message:e,at:s,text:c}},d=function(e){return e&&e!==r&&u("Expected '"+e+"' instead of '"+r+"'"),r=c.charAt(s),s+=1,r},m=function(){var e,t="";for("-"===r&&(t="-",d("-"));r>="0"&&r<="9";)t+=r,d();if("."===r)for(t+=".";d()&&r>="0"&&r<="9";)t+=r;if("e"===r||"E"===r)for(t+=r,d(),"-"!==r&&"+"!==r||(t+=r,d());r>="0"&&r<="9";)t+=r,d();if(e=+t,isFinite(e))return null==i&&(i=a(1594)),t.length>15?n.storeAsString?t:n.useNativeBigInt?BigInt(t):new i(t):n.alwaysParseAsBig?n.useNativeBigInt?BigInt(e):new i(e):e;u("Bad number")},f=function(){var e,n,a,i="";if('"'===r)for(var t=s;d();){if('"'===r)return s-1>t&&(i+=c.substring(t,s-1)),d(),i;if("\\"===r){if(s-1>t&&(i+=c.substring(t,s-1)),d(),"u"===r){for(a=0,n=0;n<4&&(e=parseInt(d(),16),isFinite(e));n+=1)a=16*a+e;i+=String.fromCharCode(a)}else{if("string"!=typeof l[r])break;i+=l[r]}t=s}}u("Bad string")},x=function(){for(;r&&r<=" ";)d()};return p=function(){switch(x(),r){case"{":return function(){var e,a=Object.create(null);if("{"===r){if(d("{"),x(),"}"===r)return d("}"),a;for(;r;){if(e=f(),x(),d(":"),!0===n.strict&&Object.hasOwnProperty.call(a,e)&&u('Duplicate key "'+e+'"'),!0===t.test(e)?"error"===n.protoAction?u("Object contains forbidden prototype property"):"ignore"===n.protoAction?p():a[e]=p():!0===o.test(e)?"error"===n.constructorAction?u("Object contains forbidden constructor property"):"ignore"===n.constructorAction?p():a[e]=p():a[e]=p(),x(),"}"===r)return d("}"),a;d(","),x()}}u("Bad object")}();case"[":return function(){var e=[];if("["===r){if(d("["),x(),"]"===r)return d("]"),e;for(;r;){if(e.push(p()),x(),"]"===r)return d("]"),e;d(","),x()}}u("Bad array")}();case'"':return f();case"-":return m();default:return r>="0"&&r<="9"?m():function(){switch(r){case"t":return d("t"),d("r"),d("u"),d("e"),!0;case"f":return d("f"),d("a"),d("l"),d("s"),d("e"),!1;case"n":return d("n"),d("u"),d("l"),d("l"),null}u("Unexpected '"+r+"'")}()}},function(e,n){var a;return c=e+"",s=0,r=" ",a=p(),x(),r&&u("Syntax error"),"function"==typeof n?function e(a,i){var t,o=a[i];return o&&"object"==typeof o&&Object.keys(o).forEach((function(n){void 0!==(t=e(o,n))?o[n]=t:delete o[n]})),n.call(a,i,o)}({"":a},""):a}}},8330:e=>{"use strict";e.exports=JSON.parse('{"name":"node-mailjet","version":"6.0.9","main":"./dist/mailjet.node.js","browser":"./dist/mailjet.web.js","types":"./dist/declarations/index.d.ts","description":"Mailjet API client","author":"Mailjet","license":"MIT","private":true,"keywords":["email","sms","node","mail","mailjet"],"engines":{"node":">= 12.0.0","npm":">= 6.9.0"},"files":["lib/**","dist/**"],"directories":{"lib":"./lib","docs":"./docs"},"typescript":{"definition":"./dist/declarations/index.d.ts"},"scripts":{"test":"npm run ts:mocha test/","test:int":"npm run ts:mocha test/integration/","test:unit":"npm run ts:mocha test/unit/","test:watch":"mocha --extension ts -r tsconfig-paths/register -r ts-node/register --watch","cover":"npm run cover:expandable npm run test","cover:int":"npm run cover:expandable npm run test:int","cover:unit":"npm run cover:expandable npm run test:unit","cover:expandable":"nyc --reporter=text-summary --reporter=lcov --report-dir=.coverage --temp-dir=./.coverage/.nyc_output","build":"npm run build:release && npm run build:prepublish","build:dev":"webpack --config ./webpack/webpack.dev.config.js --progress --color","build:release":"webpack --config ./webpack/webpack.release.config.js --progress --color","build:prepublish":"node ./scripts/PreparePackage.js","build:watch":"webpack --watch --config ./webpack/webpack.dev.config.js --progress --color","lint":"eslint .","lint:fix":"eslint --fix .","lint:errors":"eslint --quiet .","ts:run":"ts-node --transpileOnly --project ./tsconfig.json -r tsconfig-paths/register","ts:watch":"ts-node-dev --respawn --transpile-only --project ./tsconfig.json -r tsconfig-paths/register","ts:mocha":"mocha --extension ts --recursive -r tsconfig-paths/register -r ts-node/register","ts:patch":"ts-patch install -s","init":"npm install && npm run ts:patch && npm run pkg:prepare","pkg:link":"cd ./dist && npm link && echo \'\\n=== link name: node-mailjet ===\'","pkg:prepare":"husky install","pkg:precommit":"npm audit && npm run lint:errors && npm run test","release":"standard-version -a","release:dry":"standard-version --dry-run","release:quiet":"standard-version --no-verify -a","release:minor":"standard-version -a --release-as minor","release:patch":"standard-version -a --release-as patch","release:major":"standard-version -a --release-as major","docs":"typedoc --tsconfig ./tsconfig.json"},"dependencies":{"axios":"^1.8.1","json-bigint":"^1.0.0","url-join":"^4.0.0"},"devDependencies":{"@babel/core":"^7.18.0","@babel/preset-env":"^7.18.0","@commitlint/cli":"^17.0.2","@commitlint/config-conventional":"^17.0.2","@types/chai":"^4.3.1","@types/json-bigint":"^1.0.1","@types/mocha":"^9.1.1","@types/node":"^17.0.34","@types/qs":"^6.9.7","@types/superagent":"^4.1.15","@types/url-join":"^4.0.1","@typescript-eslint/eslint-plugin":"^5.24.0","@typescript-eslint/parser":"^5.24.0","babel-loader":"^8.2.5","chai":"^4.1.0","eslint":"^8.15.0","eslint-config-airbnb-base":"^15.0.0","eslint-import-resolver-typescript":"^2.7.1","eslint-plugin-import":"^2.26.0","eslint-plugin-tsdoc":"^0.2.16","husky":"^8.0.1","mocha":"^11.1.0","nock":"^13.2.4","nyc":"^15.1.0","qs":"^6.5.0","standard-version":"^9.5.0","terser-webpack-plugin":"^5.3.1","ts-loader":"^9.3.0","ts-node":"^10.7.0","ts-node-dev":"^1.1.8","ts-patch":"^2.0.1","tsconfig-paths":"^4.0.0","tsconfig-paths-webpack-plugin":"^3.5.2","typedoc":"^0.22.15","typescript":"^4.6.4","typescript-transform-paths":"^3.3.1","webpack":"^5.76.0","webpack-cli":"^4.9.2","webpack-merge":"^5.8.0"},"homepage":"https://github.com/mailjet/mailjet-apiv3-nodejs#readme","repository":{"type":"git","url":"git+https://github.com/mailjet/mailjet-apiv3-nodejs.git"},"bugs":{"url":"https://github.com/mailjet/mailjet-apiv3-nodejs/issues"},"contributors":["Arnaud Breton <arnaud@mailjet.com> (https://github.com/arnaudbreton)","Nicholas Smith <nicksmith.biz@gmail.com> (https://github.com/safani)","Jérémie Parker <jeremie@vizeat.com> (https://github.com/p-j)"]}')},8611:e=>{"use strict";e.exports=require("http")},8648:e=>{"use strict";e.exports="undefined"!=typeof Reflect&&Reflect.getPrototypeOf||null},8798:(e,n,a)=>{var i=a(8051),t=a(9500),o=a(6276);e.exports=function(e,n,a){for(var s=t(e);s.index<(s.keyedList||e).length;)i(e,n,s,(function(e,n){e?a(e,n):0!==Object.keys(s.jobs).length||a(null,s.results)})),s.index++;return o.bind(s,a)}},8842:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.SendEmailV3_1=void 0,function(e){!function(e){e.AccountDefault="account_default",e.Disabled="disabled",e.Enabled="enabled"}(e.TrackOpens||(e.TrackOpens={})),function(e){e.AccountDefault="account_default",e.Disabled="disabled",e.Enabled="enabled"}(e.TrackClicks||(e.TrackClicks={})),function(e){e.Success="success",e.Error="error"}(e.ResponseStatus||(e.ResponseStatus={}))}(n.SendEmailV3_1||(n.SendEmailV3_1={}))},8968:e=>{"use strict";e.exports=Math.floor},9023:e=>{"use strict";e.exports=require("util")},9092:(e,n,a)=>{"use strict";var i=a(1333);e.exports=function(){return i()&&!!Symbol.toStringTag}},9191:function(e,n,a){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.isValidJson=n.setValueIfNotNil=n.isNonEmptyObject=n.isPureObject=n.isUndefined=n.isNull=n.isNil=void 0;var t=i(a(476));n.isNil=t.default;var o=i(a(3750));n.isNull=o.default;var s=i(a(3235));n.isUndefined=s.default;var r=i(a(3030));n.isPureObject=r.default;var c=i(a(457));n.setValueIfNotNil=c.default;var p=i(a(7088));n.isNonEmptyObject=p.default;var l=i(a(7275));n.isValidJson=l.default},9290:e=>{"use strict";e.exports=RangeError},9329:(e,n,a)=>{"use strict";const i=a(737),t=a(6982),o=a(7016),s=a(6504),r=a(8611),c=a(5692),p=a(9023),l=a(3164),u=a(3106),d=a(2203),m=a(4434);function f(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}const x=f(i),v=f(t),h=f(o),b=f(s),g=f(r),y=f(c),w=f(p),k=f(l),j=f(u),S=f(d);function _(e,n){return function(){return e.apply(n,arguments)}}const{toString:E}=Object.prototype,{getPrototypeOf:O}=Object,{iterator:A,toStringTag:C}=Symbol,R=(T=Object.create(null),e=>{const n=E.call(e);return T[n]||(T[n]=n.slice(8,-1).toLowerCase())});var T;const P=e=>(e=e.toLowerCase(),n=>R(n)===e),F=e=>n=>typeof n===e,{isArray:B}=Array,N=F("undefined");function U(e){return null!==e&&!N(e)&&null!==e.constructor&&!N(e.constructor)&&I(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const L=P("ArrayBuffer"),z=F("string"),I=F("function"),D=F("number"),M=e=>null!==e&&"object"==typeof e,q=e=>{if("object"!==R(e))return!1;const n=O(e);return!(null!==n&&n!==Object.prototype&&null!==Object.getPrototypeOf(n)||C in e||A in e)},H=P("Date"),V=P("File"),G=P("Blob"),K=P("FileList"),W=P("URLSearchParams"),[$,J,X,Y]=["ReadableStream","Request","Response","Headers"].map(P);function Q(e,n,{allOwnKeys:a=!1}={}){if(null==e)return;let i,t;if("object"!=typeof e&&(e=[e]),B(e))for(i=0,t=e.length;i<t;i++)n.call(null,e[i],i,e);else{if(U(e))return;const t=a?Object.getOwnPropertyNames(e):Object.keys(e),o=t.length;let s;for(i=0;i<o;i++)s=t[i],n.call(null,e[s],s,e)}}function Z(e,n){if(U(e))return null;n=n.toLowerCase();const a=Object.keys(e);let i,t=a.length;for(;t-- >0;)if(i=a[t],n===i.toLowerCase())return i;return null}const ee="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ne=e=>!N(e)&&e!==ee,ae=(ie="undefined"!=typeof Uint8Array&&O(Uint8Array),e=>ie&&e instanceof ie);var ie;const te=P("HTMLFormElement"),oe=(({hasOwnProperty:e})=>(n,a)=>e.call(n,a))(Object.prototype),se=P("RegExp"),re=(e,n)=>{const a=Object.getOwnPropertyDescriptors(e),i={};Q(a,((a,t)=>{let o;!1!==(o=n(a,t,e))&&(i[t]=o||a)})),Object.defineProperties(e,i)},ce=P("AsyncFunction"),pe=(le="function"==typeof setImmediate,ue=I(ee.postMessage),le?setImmediate:ue?(de=`axios@${Math.random()}`,me=[],ee.addEventListener("message",(({source:e,data:n})=>{e===ee&&n===de&&me.length&&me.shift()()}),!1),e=>{me.push(e),ee.postMessage(de,"*")}):e=>setTimeout(e));var le,ue,de,me;const fe="undefined"!=typeof queueMicrotask?queueMicrotask.bind(ee):"undefined"!=typeof process&&process.nextTick||pe,xe={isArray:B,isArrayBuffer:L,isBuffer:U,isFormData:e=>{let n;return e&&("function"==typeof FormData&&e instanceof FormData||I(e.append)&&("formdata"===(n=R(e))||"object"===n&&I(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let n;return n="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&L(e.buffer),n},isString:z,isNumber:D,isBoolean:e=>!0===e||!1===e,isObject:M,isPlainObject:q,isEmptyObject:e=>{if(!M(e)||U(e))return!1;try{return 0===Object.keys(e).length&&Object.getPrototypeOf(e)===Object.prototype}catch(e){return!1}},isReadableStream:$,isRequest:J,isResponse:X,isHeaders:Y,isUndefined:N,isDate:H,isFile:V,isBlob:G,isRegExp:se,isFunction:I,isStream:e=>M(e)&&I(e.pipe),isURLSearchParams:W,isTypedArray:ae,isFileList:K,forEach:Q,merge:function e(){const{caseless:n}=ne(this)&&this||{},a={},i=(i,t)=>{const o=n&&Z(a,t)||t;q(a[o])&&q(i)?a[o]=e(a[o],i):q(i)?a[o]=e({},i):B(i)?a[o]=i.slice():a[o]=i};for(let e=0,n=arguments.length;e<n;e++)arguments[e]&&Q(arguments[e],i);return a},extend:(e,n,a,{allOwnKeys:i}={})=>(Q(n,((n,i)=>{a&&I(n)?e[i]=_(n,a):e[i]=n}),{allOwnKeys:i}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,n,a,i)=>{e.prototype=Object.create(n.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:n.prototype}),a&&Object.assign(e.prototype,a)},toFlatObject:(e,n,a,i)=>{let t,o,s;const r={};if(n=n||{},null==e)return n;do{for(t=Object.getOwnPropertyNames(e),o=t.length;o-- >0;)s=t[o],i&&!i(s,e,n)||r[s]||(n[s]=e[s],r[s]=!0);e=!1!==a&&O(e)}while(e&&(!a||a(e,n))&&e!==Object.prototype);return n},kindOf:R,kindOfTest:P,endsWith:(e,n,a)=>{e=String(e),(void 0===a||a>e.length)&&(a=e.length),a-=n.length;const i=e.indexOf(n,a);return-1!==i&&i===a},toArray:e=>{if(!e)return null;if(B(e))return e;let n=e.length;if(!D(n))return null;const a=new Array(n);for(;n-- >0;)a[n]=e[n];return a},forEachEntry:(e,n)=>{const a=(e&&e[A]).call(e);let i;for(;(i=a.next())&&!i.done;){const a=i.value;n.call(e,a[0],a[1])}},matchAll:(e,n)=>{let a;const i=[];for(;null!==(a=e.exec(n));)i.push(a);return i},isHTMLForm:te,hasOwnProperty:oe,hasOwnProp:oe,reduceDescriptors:re,freezeMethods:e=>{re(e,((n,a)=>{if(I(e)&&-1!==["arguments","caller","callee"].indexOf(a))return!1;const i=e[a];I(i)&&(n.enumerable=!1,"writable"in n?n.writable=!1:n.set||(n.set=()=>{throw Error("Can not rewrite read-only method '"+a+"'")}))}))},toObjectSet:(e,n)=>{const a={},i=e=>{e.forEach((e=>{a[e]=!0}))};return B(e)?i(e):i(String(e).split(n)),a},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,n,a){return n.toUpperCase()+a})),noop:()=>{},toFiniteNumber:(e,n)=>null!=e&&Number.isFinite(e=+e)?e:n,findKey:Z,global:ee,isContextDefined:ne,isSpecCompliantForm:function(e){return!!(e&&I(e.append)&&"FormData"===e[C]&&e[A])},toJSONObject:e=>{const n=new Array(10),a=(e,i)=>{if(M(e)){if(n.indexOf(e)>=0)return;if(U(e))return e;if(!("toJSON"in e)){n[i]=e;const t=B(e)?[]:{};return Q(e,((e,n)=>{const o=a(e,i+1);!N(o)&&(t[n]=o)})),n[i]=void 0,t}}return e};return a(e,0)},isAsyncFn:ce,isThenable:e=>e&&(M(e)||I(e))&&I(e.then)&&I(e.catch),setImmediate:pe,asap:fe,isIterable:e=>null!=e&&I(e[A])};function ve(e,n,a,i,t){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",n&&(this.code=n),a&&(this.config=a),i&&(this.request=i),t&&(this.response=t,this.status=t.status?t.status:null)}xe.inherits(ve,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:xe.toJSONObject(this.config),code:this.code,status:this.status}}});const he=ve.prototype,be={};function ge(e){return xe.isPlainObject(e)||xe.isArray(e)}function ye(e){return xe.endsWith(e,"[]")?e.slice(0,-2):e}function we(e,n,a){return e?e.concat(n).map((function(e,n){return e=ye(e),!a&&n?"["+e+"]":e})).join(a?".":""):n}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{be[e]={value:e}})),Object.defineProperties(ve,be),Object.defineProperty(he,"isAxiosError",{value:!0}),ve.from=(e,n,a,i,t,o)=>{const s=Object.create(he);return xe.toFlatObject(e,s,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),ve.call(s,e.message,n,a,i,t),s.cause=e,s.name=e.name,o&&Object.assign(s,o),s};const ke=xe.toFlatObject(xe,{},null,(function(e){return/^is[A-Z]/.test(e)}));function je(e,n,a){if(!xe.isObject(e))throw new TypeError("target must be an object");n=n||new(x.default||FormData);const i=(a=xe.toFlatObject(a,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,n){return!xe.isUndefined(n[e])}))).metaTokens,t=a.visitor||p,o=a.dots,s=a.indexes,r=(a.Blob||"undefined"!=typeof Blob&&Blob)&&xe.isSpecCompliantForm(n);if(!xe.isFunction(t))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(xe.isDate(e))return e.toISOString();if(xe.isBoolean(e))return e.toString();if(!r&&xe.isBlob(e))throw new ve("Blob is not supported. Use a Buffer instead.");return xe.isArrayBuffer(e)||xe.isTypedArray(e)?r&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function p(e,a,t){let r=e;if(e&&!t&&"object"==typeof e)if(xe.endsWith(a,"{}"))a=i?a:a.slice(0,-2),e=JSON.stringify(e);else if(xe.isArray(e)&&function(e){return xe.isArray(e)&&!e.some(ge)}(e)||(xe.isFileList(e)||xe.endsWith(a,"[]"))&&(r=xe.toArray(e)))return a=ye(a),r.forEach((function(e,i){!xe.isUndefined(e)&&null!==e&&n.append(!0===s?we([a],i,o):null===s?a:a+"[]",c(e))})),!1;return!!ge(e)||(n.append(we(t,a,o),c(e)),!1)}const l=[],u=Object.assign(ke,{defaultVisitor:p,convertValue:c,isVisitable:ge});if(!xe.isObject(e))throw new TypeError("data must be an object");return function e(a,i){if(!xe.isUndefined(a)){if(-1!==l.indexOf(a))throw Error("Circular reference detected in "+i.join("."));l.push(a),xe.forEach(a,(function(a,o){!0===(!(xe.isUndefined(a)||null===a)&&t.call(n,a,xe.isString(o)?o.trim():o,i,u))&&e(a,i?i.concat(o):[o])})),l.pop()}}(e),n}function Se(e){const n={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return n[e]}))}function _e(e,n){this._pairs=[],e&&je(e,this,n)}const Ee=_e.prototype;function Oe(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ae(e,n,a){if(!n)return e;const i=a&&a.encode||Oe;xe.isFunction(a)&&(a={serialize:a});const t=a&&a.serialize;let o;if(o=t?t(n,a):xe.isURLSearchParams(n)?n.toString():new _e(n,a).toString(i),o){const n=e.indexOf("#");-1!==n&&(e=e.slice(0,n)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}Ee.append=function(e,n){this._pairs.push([e,n])},Ee.toString=function(e){const n=e?function(n){return e.call(this,n,Se)}:Se;return this._pairs.map((function(e){return n(e[0])+"="+n(e[1])}),"").join("&")};const Ce=class InterceptorManager{constructor(){this.handlers=[]}use(e,n,a){return this.handlers.push({fulfilled:e,rejected:n,synchronous:!!a&&a.synchronous,runWhen:a?a.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){xe.forEach(this.handlers,(function(n){null!==n&&e(n)}))}},Re={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Te=h.default.URLSearchParams,Pe="abcdefghijklmnopqrstuvwxyz",Fe="0123456789",Be={DIGIT:Fe,ALPHA:Pe,ALPHA_DIGIT:Pe+Pe.toUpperCase()+Fe},Ne={isNode:!0,classes:{URLSearchParams:Te,FormData:x.default,Blob:"undefined"!=typeof Blob&&Blob||null},ALPHABET:Be,generateString:(e=16,n=Be.ALPHA_DIGIT)=>{let a="";const{length:i}=n,t=new Uint32Array(e);v.default.randomFillSync(t);for(let o=0;o<e;o++)a+=n[t[o]%i];return a},protocols:["http","https","file","data"]},Ue="undefined"!=typeof window&&"undefined"!=typeof document,Le="object"==typeof navigator&&navigator||void 0,ze=Ue&&(!Le||["ReactNative","NativeScript","NS"].indexOf(Le.product)<0),Ie="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,De=Ue&&window.location.href||"http://localhost",Me={...Object.freeze({__proto__:null,hasBrowserEnv:Ue,hasStandardBrowserWebWorkerEnv:Ie,hasStandardBrowserEnv:ze,navigator:Le,origin:De}),...Ne};function qe(e){function n(e,a,i,t){let o=e[t++];if("__proto__"===o)return!0;const s=Number.isFinite(+o),r=t>=e.length;return o=!o&&xe.isArray(i)?i.length:o,r?(xe.hasOwnProp(i,o)?i[o]=[i[o],a]:i[o]=a,!s):(i[o]&&xe.isObject(i[o])||(i[o]=[]),n(e,a,i[o],t)&&xe.isArray(i[o])&&(i[o]=function(e){const n={},a=Object.keys(e);let i;const t=a.length;let o;for(i=0;i<t;i++)o=a[i],n[o]=e[o];return n}(i[o])),!s)}if(xe.isFormData(e)&&xe.isFunction(e.entries)){const a={};return xe.forEachEntry(e,((e,i)=>{n(function(e){return xe.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),i,a,0)})),a}return null}const He={transitional:Re,adapter:["xhr","http","fetch"],transformRequest:[function(e,n){const a=n.getContentType()||"",i=a.indexOf("application/json")>-1,t=xe.isObject(e);if(t&&xe.isHTMLForm(e)&&(e=new FormData(e)),xe.isFormData(e))return i?JSON.stringify(qe(e)):e;if(xe.isArrayBuffer(e)||xe.isBuffer(e)||xe.isStream(e)||xe.isFile(e)||xe.isBlob(e)||xe.isReadableStream(e))return e;if(xe.isArrayBufferView(e))return e.buffer;if(xe.isURLSearchParams(e))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let o;if(t){if(a.indexOf("application/x-www-form-urlencoded")>-1)return function(e,n){return je(e,new Me.classes.URLSearchParams,{visitor:function(e,n,a,i){return Me.isNode&&xe.isBuffer(e)?(this.append(n,e.toString("base64")),!1):i.defaultVisitor.apply(this,arguments)},...n})}(e,this.formSerializer).toString();if((o=xe.isFileList(e))||a.indexOf("multipart/form-data")>-1){const n=this.env&&this.env.FormData;return je(o?{"files[]":e}:e,n&&new n,this.formSerializer)}}return t||i?(n.setContentType("application/json",!1),function(e,n,a){if(xe.isString(e))try{return(n||JSON.parse)(e),xe.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(a||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const n=this.transitional||He.transitional,a=n&&n.forcedJSONParsing,i="json"===this.responseType;if(xe.isResponse(e)||xe.isReadableStream(e))return e;if(e&&xe.isString(e)&&(a&&!this.responseType||i)){const a=!(n&&n.silentJSONParsing)&&i;try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw ve.from(e,ve.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Me.classes.FormData,Blob:Me.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};xe.forEach(["delete","get","head","post","put","patch"],(e=>{He.headers[e]={}}));const Ve=He,Ge=xe.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Ke=Symbol("internals");function We(e){return e&&String(e).trim().toLowerCase()}function $e(e){return!1===e||null==e?e:xe.isArray(e)?e.map($e):String(e)}function Je(e,n,a,i,t){return xe.isFunction(i)?i.call(this,n,a):(t&&(n=a),xe.isString(n)?xe.isString(i)?-1!==n.indexOf(i):xe.isRegExp(i)?i.test(n):void 0:void 0)}class AxiosHeaders{constructor(e){e&&this.set(e)}set(e,n,a){const i=this;function t(e,n,a){const t=We(n);if(!t)throw new Error("header name must be a non-empty string");const o=xe.findKey(i,t);(!o||void 0===i[o]||!0===a||void 0===a&&!1!==i[o])&&(i[o||n]=$e(e))}const o=(e,n)=>xe.forEach(e,((e,a)=>t(e,a,n)));if(xe.isPlainObject(e)||e instanceof this.constructor)o(e,n);else if(xe.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))o((e=>{const n={};let a,i,t;return e&&e.split("\n").forEach((function(e){t=e.indexOf(":"),a=e.substring(0,t).trim().toLowerCase(),i=e.substring(t+1).trim(),!a||n[a]&&Ge[a]||("set-cookie"===a?n[a]?n[a].push(i):n[a]=[i]:n[a]=n[a]?n[a]+", "+i:i)})),n})(e),n);else if(xe.isObject(e)&&xe.isIterable(e)){let a,i,t={};for(const n of e){if(!xe.isArray(n))throw TypeError("Object iterator must return a key-value pair");t[i=n[0]]=(a=t[i])?xe.isArray(a)?[...a,n[1]]:[a,n[1]]:n[1]}o(t,n)}else null!=e&&t(n,e,a);return this}get(e,n){if(e=We(e)){const a=xe.findKey(this,e);if(a){const e=this[a];if(!n)return e;if(!0===n)return function(e){const n=Object.create(null),a=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=a.exec(e);)n[i[1]]=i[2];return n}(e);if(xe.isFunction(n))return n.call(this,e,a);if(xe.isRegExp(n))return n.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,n){if(e=We(e)){const a=xe.findKey(this,e);return!(!a||void 0===this[a]||n&&!Je(0,this[a],a,n))}return!1}delete(e,n){const a=this;let i=!1;function t(e){if(e=We(e)){const t=xe.findKey(a,e);!t||n&&!Je(0,a[t],t,n)||(delete a[t],i=!0)}}return xe.isArray(e)?e.forEach(t):t(e),i}clear(e){const n=Object.keys(this);let a=n.length,i=!1;for(;a--;){const t=n[a];e&&!Je(0,this[t],t,e,!0)||(delete this[t],i=!0)}return i}normalize(e){const n=this,a={};return xe.forEach(this,((i,t)=>{const o=xe.findKey(a,t);if(o)return n[o]=$e(i),void delete n[t];const s=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,n,a)=>n.toUpperCase()+a))}(t):String(t).trim();s!==t&&delete n[t],n[s]=$e(i),a[s]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const n=Object.create(null);return xe.forEach(this,((a,i)=>{null!=a&&!1!==a&&(n[i]=e&&xe.isArray(a)?a.join(", "):a)})),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,n])=>e+": "+n)).join("\n")}getSetCookie(){return this.get("set-cookie")||[]}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...n){const a=new this(e);return n.forEach((e=>a.set(e))),a}static accessor(e){const n=(this[Ke]=this[Ke]={accessors:{}}).accessors,a=this.prototype;function i(e){const i=We(e);n[i]||(function(e,n){const a=xe.toCamelCase(" "+n);["get","set","has"].forEach((i=>{Object.defineProperty(e,i+a,{value:function(e,a,t){return this[i].call(this,n,e,a,t)},configurable:!0})}))}(a,e),n[i]=!0)}return xe.isArray(e)?e.forEach(i):i(e),this}}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),xe.reduceDescriptors(AxiosHeaders.prototype,(({value:e},n)=>{let a=n[0].toUpperCase()+n.slice(1);return{get:()=>e,set(e){this[a]=e}}})),xe.freezeMethods(AxiosHeaders);const Xe=AxiosHeaders;function Ye(e,n){const a=this||Ve,i=n||a,t=Xe.from(i.headers);let o=i.data;return xe.forEach(e,(function(e){o=e.call(a,o,t.normalize(),n?n.status:void 0)})),t.normalize(),o}function Qe(e){return!(!e||!e.__CANCEL__)}function Ze(e,n,a){ve.call(this,null==e?"canceled":e,ve.ERR_CANCELED,n,a),this.name="CanceledError"}function en(e,n,a){const i=a.config.validateStatus;a.status&&i&&!i(a.status)?n(new ve("Request failed with status code "+a.status,[ve.ERR_BAD_REQUEST,ve.ERR_BAD_RESPONSE][Math.floor(a.status/100)-4],a.config,a.request,a)):e(a)}function nn(e,n,a){let i=!function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}(n);return e&&(i||0==a)?function(e,n){return n?e.replace(/\/?\/$/,"")+"/"+n.replace(/^\/+/,""):e}(e,n):n}xe.inherits(Ze,ve,{__CANCEL__:!0});const an="1.11.0";function tn(e){const n=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return n&&n[1]||""}const on=/^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/,sn=Symbol("internals");class AxiosTransformStream extends S.default.Transform{constructor(e){super({readableHighWaterMark:(e=xe.toFlatObject(e,{maxRate:0,chunkSize:65536,minChunkSize:100,timeWindow:500,ticksRate:2,samplesCount:15},null,((e,n)=>!xe.isUndefined(n[e])))).chunkSize});const n=this[sn]={timeWindow:e.timeWindow,chunkSize:e.chunkSize,maxRate:e.maxRate,minChunkSize:e.minChunkSize,bytesSeen:0,isCaptured:!1,notifiedBytesLoaded:0,ts:Date.now(),bytes:0,onReadCallback:null};this.on("newListener",(e=>{"progress"===e&&(n.isCaptured||(n.isCaptured=!0))}))}_read(e){const n=this[sn];return n.onReadCallback&&n.onReadCallback(),super._read(e)}_transform(e,n,a){const i=this[sn],t=i.maxRate,o=this.readableHighWaterMark,s=i.timeWindow,r=t/(1e3/s),c=!1!==i.minChunkSize?Math.max(i.minChunkSize,.01*r):0,p=(e,n)=>{const a=Buffer.byteLength(e);i.bytesSeen+=a,i.bytes+=a,i.isCaptured&&this.emit("progress",i.bytesSeen),this.push(e)?process.nextTick(n):i.onReadCallback=()=>{i.onReadCallback=null,process.nextTick(n)}},l=(e,n)=>{const a=Buffer.byteLength(e);let l,u=null,d=o,m=0;if(t){const e=Date.now();(!i.ts||(m=e-i.ts)>=s)&&(i.ts=e,l=r-i.bytes,i.bytes=l<0?-l:0,m=0),l=r-i.bytes}if(t){if(l<=0)return setTimeout((()=>{n(null,e)}),s-m);l<d&&(d=l)}d&&a>d&&a-d>c&&(u=e.subarray(d),e=e.subarray(0,d)),p(e,u?()=>{process.nextTick(n,null,u)}:n)};l(e,(function e(n,i){if(n)return a(n);i?l(i,e):a(null)}))}}const rn=AxiosTransformStream,{asyncIterator:cn}=Symbol,pn=async function*(e){e.stream?yield*e.stream():e.arrayBuffer?yield await e.arrayBuffer():e[cn]?yield*e[cn]():yield e},ln=Me.ALPHABET.ALPHA_DIGIT+"-_",un="function"==typeof TextEncoder?new TextEncoder:new w.default.TextEncoder,dn="\r\n",mn=un.encode(dn);class FormDataPart{constructor(e,n){const{escapeName:a}=this.constructor,i=xe.isString(n);let t=`Content-Disposition: form-data; name="${a(e)}"${!i&&n.name?`; filename="${a(n.name)}"`:""}${dn}`;i?n=un.encode(String(n).replace(/\r?\n|\r\n?/g,dn)):t+=`Content-Type: ${n.type||"application/octet-stream"}${dn}`,this.headers=un.encode(t+dn),this.contentLength=i?n.byteLength:n.size,this.size=this.headers.byteLength+this.contentLength+2,this.name=e,this.value=n}async*encode(){yield this.headers;const{value:e}=this;xe.isTypedArray(e)?yield e:yield*pn(e),yield mn}static escapeName(e){return String(e).replace(/[\r\n"]/g,(e=>({"\r":"%0D","\n":"%0A",'"':"%22"}[e])))}}const fn=(e,n,a)=>{const{tag:i="form-data-boundary",size:t=25,boundary:o=i+"-"+Me.generateString(t,ln)}=a||{};if(!xe.isFormData(e))throw TypeError("FormData instance required");if(o.length<1||o.length>70)throw Error("boundary must be 10-70 characters long");const s=un.encode("--"+o+dn),r=un.encode("--"+o+"--"+dn);let c=r.byteLength;const p=Array.from(e.entries()).map((([e,n])=>{const a=new FormDataPart(e,n);return c+=a.size,a}));c+=s.byteLength*p.length,c=xe.toFiniteNumber(c);const l={"Content-Type":`multipart/form-data; boundary=${o}`};return Number.isFinite(c)&&(l["Content-Length"]=c),n&&n(l),d.Readable.from(async function*(){for(const e of p)yield s,yield*e.encode();yield r}())};class ZlibHeaderTransformStream extends S.default.Transform{__transform(e,n,a){this.push(e),a()}_transform(e,n,a){if(0!==e.length&&(this._transform=this.__transform,120!==e[0])){const e=Buffer.alloc(2);e[0]=120,e[1]=156,this.push(e,n)}this.__transform(e,n,a)}}const xn=ZlibHeaderTransformStream,vn=(e,n)=>xe.isAsyncFn(e)?function(...a){const i=a.pop();e.apply(this,a).then((e=>{try{n?i(null,...n(e)):i(null,e)}catch(e){i(e)}}),i)}:e,hn=(e,n,a=3)=>{let i=0;const t=function(e,n){e=e||10;const a=new Array(e),i=new Array(e);let t,o=0,s=0;return n=void 0!==n?n:1e3,function(r){const c=Date.now(),p=i[s];t||(t=c),a[o]=r,i[o]=c;let l=s,u=0;for(;l!==o;)u+=a[l++],l%=e;if(o=(o+1)%e,o===s&&(s=(s+1)%e),c-t<n)return;const d=p&&c-p;return d?Math.round(1e3*u/d):void 0}}(50,250);return function(e,n){let a,i,t=0,o=1e3/n;const s=(n,o=Date.now())=>{t=o,a=null,i&&(clearTimeout(i),i=null),e(...n)};return[(...e)=>{const n=Date.now(),r=n-t;r>=o?s(e,n):(a=e,i||(i=setTimeout((()=>{i=null,s(a)}),o-r)))},()=>a&&s(a)]}((a=>{const o=a.loaded,s=a.lengthComputable?a.total:void 0,r=o-i,c=t(r);i=o,e({loaded:o,total:s,progress:s?o/s:void 0,bytes:r,rate:c||void 0,estimated:c&&s&&o<=s?(s-o)/c:void 0,event:a,lengthComputable:null!=s,[n?"download":"upload"]:!0})}),a)},bn=(e,n)=>{const a=null!=e;return[i=>n[0]({lengthComputable:a,total:e,loaded:i}),n[1]]},gn=e=>(...n)=>xe.asap((()=>e(...n))),yn={flush:j.default.constants.Z_SYNC_FLUSH,finishFlush:j.default.constants.Z_SYNC_FLUSH},wn={flush:j.default.constants.BROTLI_OPERATION_FLUSH,finishFlush:j.default.constants.BROTLI_OPERATION_FLUSH},kn=xe.isFunction(j.default.createBrotliDecompress),{http:jn,https:Sn}=k.default,_n=/https:?/,En=Me.protocols.map((e=>e+":")),On=(e,[n,a])=>(e.on("end",a).on("error",a),n);function An(e,n){e.beforeRedirects.proxy&&e.beforeRedirects.proxy(e),e.beforeRedirects.config&&e.beforeRedirects.config(e,n)}function Cn(e,n,a){let i=n;if(!i&&!1!==i){const e=b.default.getProxyForUrl(a);e&&(i=new URL(e))}if(i){if(i.username&&(i.auth=(i.username||"")+":"+(i.password||"")),i.auth){(i.auth.username||i.auth.password)&&(i.auth=(i.auth.username||"")+":"+(i.auth.password||""));const n=Buffer.from(i.auth,"utf8").toString("base64");e.headers["Proxy-Authorization"]="Basic "+n}e.headers.host=e.hostname+(e.port?":"+e.port:"");const n=i.hostname||i.host;e.hostname=n,e.host=n,e.port=i.port,e.path=a,i.protocol&&(e.protocol=i.protocol.includes(":")?i.protocol:`${i.protocol}:`)}e.beforeRedirects.proxy=function(e){Cn(e,n,e.href)}}const Rn="undefined"!=typeof process&&"process"===xe.kindOf(process),Tn=(e,n)=>(({address:e,family:n})=>{if(!xe.isString(e))throw TypeError("address must be a string");return{address:e,family:n||(e.indexOf(".")<0?6:4)}})(xe.isObject(e)?e:{address:e,family:n}),Pn=Rn&&function(e){return n=async function(n,a,i){let{data:t,lookup:o,family:s}=e;const{responseType:r,responseEncoding:c}=e,p=e.method.toUpperCase();let l,u,d=!1;if(o){const e=vn(o,(e=>xe.isArray(e)?e:[e]));o=(n,a,i)=>{e(n,a,((e,n,t)=>{if(e)return i(e);const o=xe.isArray(n)?n.map((e=>Tn(e))):[Tn(n,t)];a.all?i(e,o):i(e,o[0].address,o[0].family)}))}}const f=new m.EventEmitter,x=()=>{e.cancelToken&&e.cancelToken.unsubscribe(v),e.signal&&e.signal.removeEventListener("abort",v),f.removeAllListeners()};function v(n){f.emit("abort",!n||n.type?new Ze(null,e,u):n)}i(((e,n)=>{l=!0,n&&(d=!0,x())})),f.once("abort",a),(e.cancelToken||e.signal)&&(e.cancelToken&&e.cancelToken.subscribe(v),e.signal&&(e.signal.aborted?v():e.signal.addEventListener("abort",v)));const h=nn(e.baseURL,e.url,e.allowAbsoluteUrls),b=new URL(h,Me.hasBrowserEnv?Me.origin:void 0),k=b.protocol||En[0];if("data:"===k){let i;if("GET"!==p)return en(n,a,{status:405,statusText:"method not allowed",headers:{},config:e});try{i=function(e,n,a){const i=a&&a.Blob||Me.classes.Blob,t=tn(e);if(void 0===n&&i&&(n=!0),"data"===t){e=t.length?e.slice(t.length+1):e;const a=on.exec(e);if(!a)throw new ve("Invalid URL",ve.ERR_INVALID_URL);const o=a[1],s=a[2],r=a[3],c=Buffer.from(decodeURIComponent(r),s?"base64":"utf8");if(n){if(!i)throw new ve("Blob is not supported",ve.ERR_NOT_SUPPORT);return new i([c],{type:o})}return c}throw new ve("Unsupported protocol "+t,ve.ERR_NOT_SUPPORT)}(e.url,"blob"===r,{Blob:e.env&&e.env.Blob})}catch(n){throw ve.from(n,ve.ERR_BAD_REQUEST,e)}return"text"===r?(i=i.toString(c),c&&"utf8"!==c||(i=xe.stripBOM(i))):"stream"===r&&(i=S.default.Readable.from(i)),en(n,a,{data:i,status:200,statusText:"OK",headers:new Xe,config:e})}if(-1===En.indexOf(k))return a(new ve("Unsupported protocol "+k,ve.ERR_BAD_REQUEST,e));const _=Xe.from(e.headers).normalize();_.set("User-Agent","axios/"+an,!1);const{onUploadProgress:E,onDownloadProgress:O}=e,A=e.maxRate;let C,R;if(xe.isSpecCompliantForm(t)){const e=_.getContentType(/boundary=([-_\w\d]{10,70})/i);t=fn(t,(e=>{_.set(e)}),{tag:`axios-${an}-boundary`,boundary:e&&e[1]||void 0})}else if(xe.isFormData(t)&&xe.isFunction(t.getHeaders)){if(_.set(t.getHeaders()),!_.hasContentLength())try{const e=await w.default.promisify(t.getLength).call(t);Number.isFinite(e)&&e>=0&&_.setContentLength(e)}catch(e){}}else if(xe.isBlob(t)||xe.isFile(t))t.size&&_.setContentType(t.type||"application/octet-stream"),_.setContentLength(t.size||0),t=S.default.Readable.from(pn(t));else if(t&&!xe.isStream(t)){if(Buffer.isBuffer(t));else if(xe.isArrayBuffer(t))t=Buffer.from(new Uint8Array(t));else{if(!xe.isString(t))return a(new ve("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream",ve.ERR_BAD_REQUEST,e));t=Buffer.from(t,"utf-8")}if(_.setContentLength(t.length,!1),e.maxBodyLength>-1&&t.length>e.maxBodyLength)return a(new ve("Request body larger than maxBodyLength limit",ve.ERR_BAD_REQUEST,e))}const T=xe.toFiniteNumber(_.getContentLength());let P,F;xe.isArray(A)?(C=A[0],R=A[1]):C=R=A,t&&(E||C)&&(xe.isStream(t)||(t=S.default.Readable.from(t,{objectMode:!1})),t=S.default.pipeline([t,new rn({maxRate:xe.toFiniteNumber(C)})],xe.noop),E&&t.on("progress",On(t,bn(T,hn(gn(E),!1,3))))),e.auth&&(P=(e.auth.username||"")+":"+(e.auth.password||"")),!P&&b.username&&(P=b.username+":"+b.password),P&&_.delete("authorization");try{F=Ae(b.pathname+b.search,e.params,e.paramsSerializer).replace(/^\?/,"")}catch(n){const i=new Error(n.message);return i.config=e,i.url=e.url,i.exists=!0,a(i)}_.set("Accept-Encoding","gzip, compress, deflate"+(kn?", br":""),!1);const B={path:F,method:p,headers:_.toJSON(),agents:{http:e.httpAgent,https:e.httpsAgent},auth:P,protocol:k,family:s,beforeRedirect:An,beforeRedirects:{}};let N;!xe.isUndefined(o)&&(B.lookup=o),e.socketPath?B.socketPath=e.socketPath:(B.hostname=b.hostname.startsWith("[")?b.hostname.slice(1,-1):b.hostname,B.port=b.port,Cn(B,e.proxy,k+"//"+b.hostname+(b.port?":"+b.port:"")+B.path));const U=_n.test(B.protocol);if(B.agent=U?e.httpsAgent:e.httpAgent,e.transport?N=e.transport:0===e.maxRedirects?N=U?y.default:g.default:(e.maxRedirects&&(B.maxRedirects=e.maxRedirects),e.beforeRedirect&&(B.beforeRedirects.config=e.beforeRedirect),N=U?Sn:jn),e.maxBodyLength>-1?B.maxBodyLength=e.maxBodyLength:B.maxBodyLength=1/0,e.insecureHTTPParser&&(B.insecureHTTPParser=e.insecureHTTPParser),u=N.request(B,(function(i){if(u.destroyed)return;const t=[i],o=+i.headers["content-length"];if(O||R){const e=new rn({maxRate:xe.toFiniteNumber(R)});O&&e.on("progress",On(e,bn(o,hn(gn(O),!0,3)))),t.push(e)}let s=i;const l=i.req||u;if(!1!==e.decompress&&i.headers["content-encoding"])switch("HEAD"!==p&&204!==i.statusCode||delete i.headers["content-encoding"],(i.headers["content-encoding"]||"").toLowerCase()){case"gzip":case"x-gzip":case"compress":case"x-compress":t.push(j.default.createUnzip(yn)),delete i.headers["content-encoding"];break;case"deflate":t.push(new xn),t.push(j.default.createUnzip(yn)),delete i.headers["content-encoding"];break;case"br":kn&&(t.push(j.default.createBrotliDecompress(wn)),delete i.headers["content-encoding"])}s=t.length>1?S.default.pipeline(t,xe.noop):t[0];const m=S.default.finished(s,(()=>{m(),x()})),v={status:i.statusCode,statusText:i.statusMessage,headers:new Xe(i.headers),config:e,request:l};if("stream"===r)v.data=s,en(n,a,v);else{const i=[];let t=0;s.on("data",(function(n){i.push(n),t+=n.length,e.maxContentLength>-1&&t>e.maxContentLength&&(d=!0,s.destroy(),a(new ve("maxContentLength size of "+e.maxContentLength+" exceeded",ve.ERR_BAD_RESPONSE,e,l)))})),s.on("aborted",(function(){if(d)return;const n=new ve("stream has been aborted",ve.ERR_BAD_RESPONSE,e,l);s.destroy(n),a(n)})),s.on("error",(function(n){u.destroyed||a(ve.from(n,null,e,l))})),s.on("end",(function(){try{let e=1===i.length?i[0]:Buffer.concat(i);"arraybuffer"!==r&&(e=e.toString(c),c&&"utf8"!==c||(e=xe.stripBOM(e))),v.data=e}catch(n){return a(ve.from(n,null,e,v.request,v))}en(n,a,v)}))}f.once("abort",(e=>{s.destroyed||(s.emit("error",e),s.destroy())}))})),f.once("abort",(e=>{a(e),u.destroy(e)})),u.on("error",(function(n){a(ve.from(n,null,e,u))})),u.on("socket",(function(e){e.setKeepAlive(!0,6e4)})),e.timeout){const n=parseInt(e.timeout,10);if(Number.isNaN(n))return void a(new ve("error trying to parse `config.timeout` to int",ve.ERR_BAD_OPTION_VALUE,e,u));u.setTimeout(n,(function(){if(l)return;let n=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const i=e.transitional||Re;e.timeoutErrorMessage&&(n=e.timeoutErrorMessage),a(new ve(n,i.clarifyTimeoutError?ve.ETIMEDOUT:ve.ECONNABORTED,e,u)),v()}))}if(xe.isStream(t)){let n=!1,a=!1;t.on("end",(()=>{n=!0})),t.once("error",(e=>{a=!0,u.destroy(e)})),t.on("close",(()=>{n||a||v(new Ze("Request stream has been aborted",e,u))})),t.pipe(u)}else u.end(t)},new Promise(((e,a)=>{let i,t;const o=(e,n)=>{t||(t=!0,i&&i(e,n))},s=e=>{o(e,!0),a(e)};n((n=>{o(n),e(n)}),s,(e=>i=e)).catch(s)}));var n},Fn=Me.hasStandardBrowserEnv?((e,n)=>a=>(a=new URL(a,Me.origin),e.protocol===a.protocol&&e.host===a.host&&(n||e.port===a.port)))(new URL(Me.origin),Me.navigator&&/(msie|trident)/i.test(Me.navigator.userAgent)):()=>!0,Bn=Me.hasStandardBrowserEnv?{write(e,n,a,i,t,o){const s=[e+"="+encodeURIComponent(n)];xe.isNumber(a)&&s.push("expires="+new Date(a).toGMTString()),xe.isString(i)&&s.push("path="+i),xe.isString(t)&&s.push("domain="+t),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read(e){const n=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}},Nn=e=>e instanceof Xe?{...e}:e;function Un(e,n){n=n||{};const a={};function i(e,n,a,i){return xe.isPlainObject(e)&&xe.isPlainObject(n)?xe.merge.call({caseless:i},e,n):xe.isPlainObject(n)?xe.merge({},n):xe.isArray(n)?n.slice():n}function t(e,n,a,t){return xe.isUndefined(n)?xe.isUndefined(e)?void 0:i(void 0,e,0,t):i(e,n,0,t)}function o(e,n){if(!xe.isUndefined(n))return i(void 0,n)}function s(e,n){return xe.isUndefined(n)?xe.isUndefined(e)?void 0:i(void 0,e):i(void 0,n)}function r(a,t,o){return o in n?i(a,t):o in e?i(void 0,a):void 0}const c={url:o,method:o,data:o,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,withXSRFToken:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:r,headers:(e,n,a)=>t(Nn(e),Nn(n),0,!0)};return xe.forEach(Object.keys({...e,...n}),(function(i){const o=c[i]||t,s=o(e[i],n[i],i);xe.isUndefined(s)&&o!==r||(a[i]=s)})),a}const Ln=e=>{const n=Un({},e);let a,{data:i,withXSRFToken:t,xsrfHeaderName:o,xsrfCookieName:s,headers:r,auth:c}=n;if(n.headers=r=Xe.from(r),n.url=Ae(nn(n.baseURL,n.url,n.allowAbsoluteUrls),e.params,e.paramsSerializer),c&&r.set("Authorization","Basic "+btoa((c.username||"")+":"+(c.password?unescape(encodeURIComponent(c.password)):""))),xe.isFormData(i))if(Me.hasStandardBrowserEnv||Me.hasStandardBrowserWebWorkerEnv)r.setContentType(void 0);else if(!1!==(a=r.getContentType())){const[e,...n]=a?a.split(";").map((e=>e.trim())).filter(Boolean):[];r.setContentType([e||"multipart/form-data",...n].join("; "))}if(Me.hasStandardBrowserEnv&&(t&&xe.isFunction(t)&&(t=t(n)),t||!1!==t&&Fn(n.url))){const e=o&&s&&Bn.read(s);e&&r.set(o,e)}return n},zn="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(n,a){const i=Ln(e);let t=i.data;const o=Xe.from(i.headers).normalize();let s,r,c,p,l,{responseType:u,onUploadProgress:d,onDownloadProgress:m}=i;function f(){p&&p(),l&&l(),i.cancelToken&&i.cancelToken.unsubscribe(s),i.signal&&i.signal.removeEventListener("abort",s)}let x=new XMLHttpRequest;function v(){if(!x)return;const i=Xe.from("getAllResponseHeaders"in x&&x.getAllResponseHeaders());en((function(e){n(e),f()}),(function(e){a(e),f()}),{data:u&&"text"!==u&&"json"!==u?x.response:x.responseText,status:x.status,statusText:x.statusText,headers:i,config:e,request:x}),x=null}x.open(i.method.toUpperCase(),i.url,!0),x.timeout=i.timeout,"onloadend"in x?x.onloadend=v:x.onreadystatechange=function(){x&&4===x.readyState&&(0!==x.status||x.responseURL&&0===x.responseURL.indexOf("file:"))&&setTimeout(v)},x.onabort=function(){x&&(a(new ve("Request aborted",ve.ECONNABORTED,e,x)),x=null)},x.onerror=function(){a(new ve("Network Error",ve.ERR_NETWORK,e,x)),x=null},x.ontimeout=function(){let n=i.timeout?"timeout of "+i.timeout+"ms exceeded":"timeout exceeded";const t=i.transitional||Re;i.timeoutErrorMessage&&(n=i.timeoutErrorMessage),a(new ve(n,t.clarifyTimeoutError?ve.ETIMEDOUT:ve.ECONNABORTED,e,x)),x=null},void 0===t&&o.setContentType(null),"setRequestHeader"in x&&xe.forEach(o.toJSON(),(function(e,n){x.setRequestHeader(n,e)})),xe.isUndefined(i.withCredentials)||(x.withCredentials=!!i.withCredentials),u&&"json"!==u&&(x.responseType=i.responseType),m&&([c,l]=hn(m,!0),x.addEventListener("progress",c)),d&&x.upload&&([r,p]=hn(d),x.upload.addEventListener("progress",r),x.upload.addEventListener("loadend",p)),(i.cancelToken||i.signal)&&(s=n=>{x&&(a(!n||n.type?new Ze(null,e,x):n),x.abort(),x=null)},i.cancelToken&&i.cancelToken.subscribe(s),i.signal&&(i.signal.aborted?s():i.signal.addEventListener("abort",s)));const h=tn(i.url);h&&-1===Me.protocols.indexOf(h)?a(new ve("Unsupported protocol "+h+":",ve.ERR_BAD_REQUEST,e)):x.send(t||null)}))},In=(e,n)=>{const{length:a}=e=e?e.filter(Boolean):[];if(n||a){let a,i=new AbortController;const t=function(e){if(!a){a=!0,s();const n=e instanceof Error?e:this.reason;i.abort(n instanceof ve?n:new Ze(n instanceof Error?n.message:n))}};let o=n&&setTimeout((()=>{o=null,t(new ve(`timeout ${n} of ms exceeded`,ve.ETIMEDOUT))}),n);const s=()=>{e&&(o&&clearTimeout(o),o=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(t):e.removeEventListener("abort",t)})),e=null)};e.forEach((e=>e.addEventListener("abort",t)));const{signal:r}=i;return r.unsubscribe=()=>xe.asap(s),r}},Dn=function*(e,n){let a=e.byteLength;if(!n||a<n)return void(yield e);let i,t=0;for(;t<a;)i=t+n,yield e.slice(t,i),t=i},Mn=async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const n=e.getReader();try{for(;;){const{done:e,value:a}=await n.read();if(e)break;yield a}}finally{await n.cancel()}},qn=(e,n,a,i)=>{const t=async function*(e,n){for await(const a of Mn(e))yield*Dn(a,n)}(e,n);let o,s=0,r=e=>{o||(o=!0,i&&i(e))};return new ReadableStream({async pull(e){try{const{done:n,value:i}=await t.next();if(n)return r(),void e.close();let o=i.byteLength;if(a){let e=s+=o;a(e)}e.enqueue(new Uint8Array(i))}catch(e){throw r(e),e}},cancel:e=>(r(e),t.return())},{highWaterMark:2})},Hn="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Vn=Hn&&"function"==typeof ReadableStream,Gn=Hn&&("function"==typeof TextEncoder?(Kn=new TextEncoder,e=>Kn.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var Kn;const Wn=(e,...n)=>{try{return!!e(...n)}catch(e){return!1}},$n=Vn&&Wn((()=>{let e=!1;const n=new Request(Me.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!n})),Jn=Vn&&Wn((()=>xe.isReadableStream(new Response("").body))),Xn={stream:Jn&&(e=>e.body)};var Yn;Hn&&(Yn=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!Xn[e]&&(Xn[e]=xe.isFunction(Yn[e])?n=>n[e]():(n,a)=>{throw new ve(`Response type '${e}' is not supported`,ve.ERR_NOT_SUPPORT,a)})})));const Qn=async(e,n)=>{const a=xe.toFiniteNumber(e.getContentLength());return null==a?(async e=>{if(null==e)return 0;if(xe.isBlob(e))return e.size;if(xe.isSpecCompliantForm(e)){const n=new Request(Me.origin,{method:"POST",body:e});return(await n.arrayBuffer()).byteLength}return xe.isArrayBufferView(e)||xe.isArrayBuffer(e)?e.byteLength:(xe.isURLSearchParams(e)&&(e+=""),xe.isString(e)?(await Gn(e)).byteLength:void 0)})(n):a},Zn=Hn&&(async e=>{let{url:n,method:a,data:i,signal:t,cancelToken:o,timeout:s,onDownloadProgress:r,onUploadProgress:c,responseType:p,headers:l,withCredentials:u="same-origin",fetchOptions:d}=Ln(e);p=p?(p+"").toLowerCase():"text";let m,f=In([t,o&&o.toAbortSignal()],s);const x=f&&f.unsubscribe&&(()=>{f.unsubscribe()});let v;try{if(c&&$n&&"get"!==a&&"head"!==a&&0!==(v=await Qn(l,i))){let e,a=new Request(n,{method:"POST",body:i,duplex:"half"});if(xe.isFormData(i)&&(e=a.headers.get("content-type"))&&l.setContentType(e),a.body){const[e,n]=bn(v,hn(gn(c)));i=qn(a.body,65536,e,n)}}xe.isString(u)||(u=u?"include":"omit");const t="credentials"in Request.prototype;m=new Request(n,{...d,signal:f,method:a.toUpperCase(),headers:l.normalize().toJSON(),body:i,duplex:"half",credentials:t?u:void 0});let o=await fetch(m,d);const s=Jn&&("stream"===p||"response"===p);if(Jn&&(r||s&&x)){const e={};["status","statusText","headers"].forEach((n=>{e[n]=o[n]}));const n=xe.toFiniteNumber(o.headers.get("content-length")),[a,i]=r&&bn(n,hn(gn(r),!0))||[];o=new Response(qn(o.body,65536,a,(()=>{i&&i(),x&&x()})),e)}p=p||"text";let h=await Xn[xe.findKey(Xn,p)||"text"](o,e);return!s&&x&&x(),await new Promise(((n,a)=>{en(n,a,{data:h,headers:Xe.from(o.headers),status:o.status,statusText:o.statusText,config:e,request:m})}))}catch(n){if(x&&x(),n&&"TypeError"===n.name&&/Load failed|fetch/i.test(n.message))throw Object.assign(new ve("Network Error",ve.ERR_NETWORK,e,m),{cause:n.cause||n});throw ve.from(n,n&&n.code,e,m)}}),ea={http:Pn,xhr:zn,fetch:Zn};xe.forEach(ea,((e,n)=>{if(e){try{Object.defineProperty(e,"name",{value:n})}catch(e){}Object.defineProperty(e,"adapterName",{value:n})}}));const na=e=>`- ${e}`,aa=e=>xe.isFunction(e)||null===e||!1===e,ia=e=>{e=xe.isArray(e)?e:[e];const{length:n}=e;let a,i;const t={};for(let o=0;o<n;o++){let n;if(a=e[o],i=a,!aa(a)&&(i=ea[(n=String(a)).toLowerCase()],void 0===i))throw new ve(`Unknown adapter '${n}'`);if(i)break;t[n||"#"+o]=i}if(!i){const e=Object.entries(t).map((([e,n])=>`adapter ${e} `+(!1===n?"is not supported by the environment":"is not available in the build")));throw new ve("There is no suitable adapter to dispatch the request "+(n?e.length>1?"since :\n"+e.map(na).join("\n"):" "+na(e[0]):"as no adapter specified"),"ERR_NOT_SUPPORT")}return i};function ta(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Ze(null,e)}function oa(e){return ta(e),e.headers=Xe.from(e.headers),e.data=Ye.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),ia(e.adapter||Ve.adapter)(e).then((function(n){return ta(e),n.data=Ye.call(e,e.transformResponse,n),n.headers=Xe.from(n.headers),n}),(function(n){return Qe(n)||(ta(e),n&&n.response&&(n.response.data=Ye.call(e,e.transformResponse,n.response),n.response.headers=Xe.from(n.response.headers))),Promise.reject(n)}))}const sa={};["object","boolean","number","function","string","symbol"].forEach(((e,n)=>{sa[e]=function(a){return typeof a===e||"a"+(n<1?"n ":" ")+e}}));const ra={};sa.transitional=function(e,n,a){function i(e,n){return"[Axios v"+an+"] Transitional option '"+e+"'"+n+(a?". "+a:"")}return(a,t,o)=>{if(!1===e)throw new ve(i(t," has been removed"+(n?" in "+n:"")),ve.ERR_DEPRECATED);return n&&!ra[t]&&(ra[t]=!0,console.warn(i(t," has been deprecated since v"+n+" and will be removed in the near future"))),!e||e(a,t,o)}},sa.spelling=function(e){return(n,a)=>(console.warn(`${a} is likely a misspelling of ${e}`),!0)};const ca={assertOptions:function(e,n,a){if("object"!=typeof e)throw new ve("options must be an object",ve.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let t=i.length;for(;t-- >0;){const o=i[t],s=n[o];if(s){const n=e[o],a=void 0===n||s(n,o,e);if(!0!==a)throw new ve("option "+o+" must be "+a,ve.ERR_BAD_OPTION_VALUE)}else if(!0!==a)throw new ve("Unknown option "+o,ve.ERR_BAD_OPTION)}},validators:sa},pa=ca.validators;class Axios{constructor(e){this.defaults=e||{},this.interceptors={request:new Ce,response:new Ce}}async request(e,n){try{return await this._request(e,n)}catch(e){if(e instanceof Error){let n={};Error.captureStackTrace?Error.captureStackTrace(n):n=new Error;const a=n.stack?n.stack.replace(/^.+\n/,""):"";try{e.stack?a&&!String(e.stack).endsWith(a.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+a):e.stack=a}catch(e){}}throw e}}_request(e,n){"string"==typeof e?(n=n||{}).url=e:n=e||{},n=Un(this.defaults,n);const{transitional:a,paramsSerializer:i,headers:t}=n;void 0!==a&&ca.assertOptions(a,{silentJSONParsing:pa.transitional(pa.boolean),forcedJSONParsing:pa.transitional(pa.boolean),clarifyTimeoutError:pa.transitional(pa.boolean)},!1),null!=i&&(xe.isFunction(i)?n.paramsSerializer={serialize:i}:ca.assertOptions(i,{encode:pa.function,serialize:pa.function},!0)),void 0!==n.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?n.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:n.allowAbsoluteUrls=!0),ca.assertOptions(n,{baseUrl:pa.spelling("baseURL"),withXsrfToken:pa.spelling("withXSRFToken")},!0),n.method=(n.method||this.defaults.method||"get").toLowerCase();let o=t&&xe.merge(t.common,t[n.method]);t&&xe.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete t[e]})),n.headers=Xe.concat(o,t);const s=[];let r=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(n)||(r=r&&e.synchronous,s.unshift(e.fulfilled,e.rejected))}));const c=[];let p;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let l,u=0;if(!r){const e=[oa.bind(this),void 0];for(e.unshift(...s),e.push(...c),l=e.length,p=Promise.resolve(n);u<l;)p=p.then(e[u++],e[u++]);return p}l=s.length;let d=n;for(u=0;u<l;){const e=s[u++],n=s[u++];try{d=e(d)}catch(e){n.call(this,e);break}}try{p=oa.call(this,d)}catch(e){return Promise.reject(e)}for(u=0,l=c.length;u<l;)p=p.then(c[u++],c[u++]);return p}getUri(e){return Ae(nn((e=Un(this.defaults,e)).baseURL,e.url,e.allowAbsoluteUrls),e.params,e.paramsSerializer)}}xe.forEach(["delete","get","head","options"],(function(e){Axios.prototype[e]=function(n,a){return this.request(Un(a||{},{method:e,url:n,data:(a||{}).data}))}})),xe.forEach(["post","put","patch"],(function(e){function n(n){return function(a,i,t){return this.request(Un(t||{},{method:e,headers:n?{"Content-Type":"multipart/form-data"}:{},url:a,data:i}))}}Axios.prototype[e]=n(),Axios.prototype[e+"Form"]=n(!0)}));const la=Axios;class CancelToken{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let n;this.promise=new Promise((function(e){n=e}));const a=this;this.promise.then((e=>{if(!a._listeners)return;let n=a._listeners.length;for(;n-- >0;)a._listeners[n](e);a._listeners=null})),this.promise.then=e=>{let n;const i=new Promise((e=>{a.subscribe(e),n=e})).then(e);return i.cancel=function(){a.unsubscribe(n)},i},e((function(e,i,t){a.reason||(a.reason=new Ze(e,i,t),n(a.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const n=this._listeners.indexOf(e);-1!==n&&this._listeners.splice(n,1)}toAbortSignal(){const e=new AbortController,n=n=>{e.abort(n)};return this.subscribe(n),e.signal.unsubscribe=()=>this.unsubscribe(n),e.signal}static source(){let e;return{token:new CancelToken((function(n){e=n})),cancel:e}}}const ua=CancelToken,da={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(da).forEach((([e,n])=>{da[n]=e}));const ma=da,fa=function e(n){const a=new la(n),i=_(la.prototype.request,a);return xe.extend(i,la.prototype,a,{allOwnKeys:!0}),xe.extend(i,a,null,{allOwnKeys:!0}),i.create=function(a){return e(Un(n,a))},i}(Ve);fa.Axios=la,fa.CanceledError=Ze,fa.CancelToken=ua,fa.isCancel=Qe,fa.VERSION=an,fa.toFormData=je,fa.AxiosError=ve,fa.Cancel=fa.CanceledError,fa.all=function(e){return Promise.all(e)},fa.spread=function(e){return function(n){return e.apply(null,n)}},fa.isAxiosError=function(e){return xe.isObject(e)&&!0===e.isAxiosError},fa.mergeConfig=Un,fa.AxiosHeaders=Xe,fa.formToJSON=e=>qe(xe.isHTMLForm(e)?new FormData(e):e),fa.getAdapter=ia,fa.HttpStatusCode=ma,fa.default=fa,e.exports=fa},9353:e=>{"use strict";var n=Object.prototype.toString,a=Math.max,i=function(e,n){for(var a=[],i=0;i<e.length;i+=1)a[i]=e[i];for(var t=0;t<n.length;t+=1)a[t+e.length]=n[t];return a};e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==n.apply(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var o,s=function(e,n){for(var a=[],i=n||0,t=0;i<e.length;i+=1,t+=1)a[t]=e[i];return a}(arguments,1),r=a(0,t.length-s.length),c=[],p=0;p<r;p++)c[p]="$"+p;if(o=Function("binder","return function ("+function(e,n){for(var a="",i=0;i<e.length;i+=1)a+=e[i],i+1<e.length&&(a+=n);return a}(c,",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof o){var n=t.apply(this,i(s,arguments));return Object(n)===n?n:this}return t.apply(e,i(s,arguments))})),t.prototype){var l=function(){};l.prototype=t.prototype,o.prototype=new l,l.prototype=null}return o}},9383:e=>{"use strict";e.exports=Error},9500:e=>{e.exports=function(e,n){var a=!Array.isArray(e),i={index:0,keyedList:a||n?Object.keys(e):null,jobs:{},results:a?{}:[],size:a?Object.keys(e).length:e.length};return n&&i.keyedList.sort(a?n:function(a,i){return n(e[a],e[i])}),i}},9538:e=>{"use strict";e.exports=ReferenceError},9605:(e,n,a)=>{"use strict";var i=a(453)("%Object.defineProperty%",!0),t=a(9092)(),o=a(9957),s=a(9675),r=t?Symbol.toStringTag:null;e.exports=function(e,n){var a=arguments.length>2&&!!arguments[2]&&arguments[2].force,t=arguments.length>2&&!!arguments[2]&&arguments[2].nonConfigurable;if(void 0!==a&&"boolean"!=typeof a||void 0!==t&&"boolean"!=typeof t)throw new s("if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans");!r||!a&&o(e,r)||(i?i(e,r,{configurable:!t,enumerable:!1,value:n,writable:!1}):e[r]=n)}},9612:e=>{"use strict";e.exports=Object},9675:e=>{"use strict";e.exports=TypeError},9896:e=>{"use strict";e.exports=require("fs")},9957:(e,n,a)=>{"use strict";var i=Function.prototype.call,t=Object.prototype.hasOwnProperty,o=a(6743);e.exports=o.call(i,t)}},n={},function a(i){var t=n[i];if(void 0!==t)return t.exports;var o=n[i]={exports:{}};return e[i].call(o.exports,o,o.exports,a),o.exports}(6081).default;var e,n}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,